{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"secure",
				"secureTripcode"
			]
		]
	},
	"buffers":
	[
		{
			"file": "irc/modes/modes.go",
			"settings":
			{
				"buffer_size": 9065,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "irc/channel.go",
			"settings":
			{
				"buffer_size": 26230,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "irc/socket.go",
			"settings":
			{
				"buffer_size": 5815,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 68 files for \"modes\"\n\n/home/kei/Development/oragono/irc/channel.go:\n   17  \t\"github.com/goshuirc/irc-go/ircmsg\"\n   18  \t\"github.com/unendingPattern/oragono/irc/caps\"\n   19: \t\"github.com/unendingPattern/oragono/irc/modes\"\n   20  )\n   21  \n   22  // Channel represents a channel that clients can join.\n   23  type Channel struct {\n   24: \tflags             *modes.ModeSet\n   25: \tlists             map[modes.Mode]*UserMaskSet\n   26  \tkey               string\n   27  \thighlights        string\n   ..\n   40  \ttopicSetTime      time.Time\n   41  \tuserLimit         uint64\n   42: \taccountToUMode    map[string]modes.Mode\n   43  }\n   44  \n   ..\n   54  \tchannel := &Channel{\n   55  \t\tcreatedTime: time.Now(), // may be overwritten by applyRegInfo\n   56: \t\tflags:       modes.NewModeSet(),\n   57: \t\tlists: map[modes.Mode]*UserMaskSet{\n   58: \t\t\tmodes.BanMask:    NewUserMaskSet(),\n   59: \t\t\tmodes.ExceptMask: NewUserMaskSet(),\n   60: \t\t\tmodes.InviteMask: NewUserMaskSet(),\n   61  \t\t},\n   62  \t\tmembers:        make(MemberSet),\n   ..\n   64  \t\tnameCasefolded: casefoldedName,\n   65  \t\tserver:         s,\n   66: \t\taccountToUMode: make(map[string]modes.Mode),\n   67  \t}\n   68  \n   ..\n   70  \t\tchannel.applyRegInfo(regInfo)\n   71  \t} else {\n   72: \t\tfor _, mode := range s.DefaultChannelModes() {\n   73  \t\t\tchannel.flags.SetMode(mode, true)\n   74  \t\t}\n   ..\n   89  \tchannel.key = chanReg.Key\n   90  \n   91: \tfor _, mode := range chanReg.Modes {\n   92  \t\tchannel.flags.SetMode(mode, true)\n   93  \t}\n   94  \tfor _, mask := range chanReg.Banlist {\n   95: \t\tchannel.lists[modes.BanMask].Add(mask)\n   96  \t}\n   97  \tfor _, mask := range chanReg.Exceptlist {\n   98: \t\tchannel.lists[modes.ExceptMask].Add(mask)\n   99  \t}\n  100  \tfor _, mask := range chanReg.Invitelist {\n  101: \t\tchannel.lists[modes.InviteMask].Add(mask)\n  102  \t}\n  103  \tfor account, mode := range chanReg.AccountToUMode {\n  ...\n  121  \t}\n  122  \n  123: \tif includeFlags&IncludeModes != 0 {\n  124  \t\tinfo.Key = channel.key\n  125: \t\tinfo.Modes = channel.flags.AllModes()\n  126  \t}\n  127  \n  128  \tif includeFlags&IncludeLists != 0 {\n  129: \t\tfor mask := range channel.lists[modes.BanMask].masks {\n  130  \t\t\tinfo.Banlist = append(info.Banlist, mask)\n  131  \t\t}\n  132: \t\tfor mask := range channel.lists[modes.ExceptMask].masks {\n  133  \t\t\tinfo.Exceptlist = append(info.Exceptlist, mask)\n  134  \t\t}\n  135: \t\tfor mask := range channel.lists[modes.InviteMask].masks {\n  136  \t\t\tinfo.Invitelist = append(info.Invitelist, mask)\n  137  \t\t}\n  138: \t\tinfo.AccountToUMode = make(map[string]modes.Mode)\n  139  \t\tfor account, mode := range channel.accountToUMode {\n  140  \t\t\tinfo.AccountToUMode[account] = mode\n  ...\n  155  \tchannel.registeredFounder = founder\n  156  \tchannel.registeredTime = time.Now()\n  157: \tchannel.accountToUMode[founder] = modes.ChannelFounder\n  158  \treturn nil\n  159  }\n  ...\n  167  \tvar zeroTime time.Time\n  168  \tchannel.registeredTime = zeroTime\n  169: \tchannel.accountToUMode = make(map[string]modes.Mode)\n  170  }\n  171  \n  ...\n  208  \t\t}\n  209  \t\tchannel.stateMutex.RLock()\n  210: \t\tmodes := channel.members[target]\n  211  \t\tchannel.stateMutex.RUnlock()\n  212: \t\tif modes == nil {\n  213  \t\t\tcontinue\n  214  \t\t}\n  215: \t\tprefix := modes.Prefixes(isMultiPrefix)\n  216  \t\tif buffer.Len()+len(nick)+len(prefix)+1 > maxNamLen {\n  217  \t\t\tnamesLines = append(namesLines, buffer.String())\n  ...\n  239  \n  240  // ClientIsAtLeast returns whether the client has at least the given channel privilege.\n  241: func (channel *Channel) ClientIsAtLeast(client *Client, permission modes.Mode) bool {\n  242  \tchannel.stateMutex.RLock()\n  243: \tclientModes := channel.members[client]\n  244  \tchannel.stateMutex.RUnlock()\n  245  \n  246: \tif clientModes == nil {\n  247  \t\treturn false\n  248  \t}\n  249  \n  250: \tfor _, mode := range modes.ChannelUserModes {\n  251: \t\tif clientModes.HasMode(mode) {\n  252  \t\t\treturn true\n  253  \t\t}\n  ...\n  264  \tchannel.stateMutex.RLock()\n  265  \tdefer channel.stateMutex.RUnlock()\n  266: \tmodes, present := channel.members[client]\n  267  \tif !present {\n  268  \t\treturn \"\"\n  269  \t} else {\n  270: \t\treturn modes.Prefixes(isMultiPrefix)\n  271  \t}\n  272  }\n  ...\n  276  \tdefer channel.stateMutex.RUnlock()\n  277  \n  278: \tclientModes := channel.members[client]\n  279: \ttargetModes := channel.members[target]\n  280  \tresult := false\n  281: \tfor _, mode := range modes.ChannelPrivModes {\n  282: \t\tif clientModes.HasMode(mode) {\n  283  \t\t\tresult = true\n  284  \t\t\t// admins cannot kick other admins\n  285: \t\t\tif mode == modes.ChannelAdmin && targetModes.HasMode(modes.ChannelAdmin) {\n  286  \t\t\t\tresult = false\n  287  \t\t\t}\n  288  \t\t\tbreak\n  289: \t\t} else if targetModes.HasMode(mode) {\n  290  \t\t\tbreak\n  291  \t\t}\n  ...\n  302  \n  303  // <mode> <mode params>\n  304: func (channel *Channel) modeStrings(client *Client) (result []string) {\n  305: \tisMember := client.HasMode(modes.Operator) || channel.hasClient(client)\n  306  \tshowKey := isMember && (channel.key != \"\")\n  307  \tshowHighLight := isMember && (channel.highlights != \"\")\n  ...\n  312  \t// flags with args\n  313  \tif showHighLight {\n  314: \t\tmods += modes.HighLight.String()\n  315  \t}\n  316  \tif showKey {\n  317: \t\tmods += modes.Key.String()\n  318  \t}\n  319  \tif showUserLimit {\n  320: \t\tmods += modes.UserLimit.String()\n  321  \t}\n  322  \n  ...\n  390  \t}\n  391  \n  392: \tisInvited := channel.lists[modes.InviteMask].Match(client.nickMaskCasefolded)\n  393: \tif !hasPrivs && channel.flags.HasMode(modes.InviteOnly) && !isInvited {\n  394  \t\trb.Add(nil, client.server.name, ERR_INVITEONLYCHAN, chname, fmt.Sprintf(client.t(\"Cannot join channel (+%s)\"), \"i\"))\n  395  \t\treturn\n  396  \t}\n  397  \n  398: \tif !hasPrivs && channel.lists[modes.BanMask].Match(client.nickMaskCasefolded) &&\n  399  \t\t!isInvited &&\n  400: \t\t!channel.lists[modes.ExceptMask].Match(client.nickMaskCasefolded) {\n  401  \t\trb.Add(nil, client.server.name, ERR_BANNEDFROMCHAN, chname, fmt.Sprintf(client.t(\"Cannot join channel (+%s)\"), \"b\"))\n  402  \t\treturn\n  ...\n  405  \tclient.server.logger.Debug(\"join\", fmt.Sprintf(\"%s joined channel %s\", client.nick, chname))\n  406  \n  407: \tnewChannel, givenMode := func() (newChannel bool, givenMode modes.Mode) {\n  408  \t\tchannel.joinPartMutex.Lock()\n  409  \t\tdefer channel.joinPartMutex.Unlock()\n  ...\n  417  \t\t\tnewChannel = firstJoin && channel.registeredFounder == \"\"\n  418  \t\t\tif newChannel {\n  419: \t\t\t\tgivenMode = modes.ChannelOperator\n  420  \t\t\t} else {\n  421  \t\t\t\tgivenMode = channel.accountToUMode[account]\n  ...\n  436  \trealname := client.Realname()\n  437  \taccountName := client.AccountName()\n  438: \tvar modestr string\n  439  \tif givenMode != 0 {\n  440: \t\tmodestr = fmt.Sprintf(\"+%v\", givenMode)\n  441  \t}\n  442  \n  ...\n  447  \n  448  \t\t// check if channel is an auditorium (no joins/parts)\n  449: \t\tif !channel.flags.HasMode(modes.Auditorium) {\n  450  \t\t\tif member.capabilities.Has(caps.ExtendedJoin) {\n  451  \t\t\t\tmember.Send(nil, nickmask, \"JOIN\", chname, accountName, realname)\n  ...\n  456  \n  457  \t\tif givenMode != 0 {\n  458: \t\t\tmember.Send(nil, client.server.name, \"MODE\", chname, modestr, nick)\n  459  \t\t}\n  460  \n  ...\n  473  \n  474  \t// check if channel is an auditorium (no joins/parts)\n  475: \tif !channel.flags.HasMode(modes.Auditorium) {\n  476  \t\tchannel.Names(client, rb)\n  477  \t}\n  478  \n  479  \tif givenMode != 0 {\n  480: \t\trb.Add(nil, client.server.name, \"MODE\", chname, modestr, nick)\n  481  \t}\n  482  }\n  ...\n  493  \n  494  \tnickmask := client.NickMaskString()\n  495: \tif !channel.flags.HasMode(modes.Auditorium) {\n  496  \t\tfor _, member := range channel.Members() {\n  497  \t\t\tmember.Send(nil, nickmask, \"PART\", chname, message)\n  ...\n  528  // SetTopic sets the topic of this channel, if the client is allowed to do so.\n  529  func (channel *Channel) SetTopic(client *Client, topic string, rb *ResponseBuffer) {\n  530: \tif !(client.HasMode(modes.Operator) || channel.hasClient(client)) {\n  531  \t\trb.Add(nil, client.server.name, ERR_NOTONCHANNEL, channel.name, client.t(\"You're not on that channel\"))\n  532  \t\treturn\n  533  \t}\n  534  \n  535: \tif channel.flags.HasMode(modes.OpOnlyTopic) && !channel.ClientIsAtLeast(client, modes.ChannelOperator) {\n  536  \t\trb.Add(nil, client.server.name, ERR_CHANOPRIVSNEEDED, channel.name, client.t(\"You're not a channel operator\"))\n  537  \t\treturn\n  ...\n  566  \n  567  \t_, hasClient := channel.members[client]\n  568: \tif channel.flags.HasMode(modes.NoOutside) && !hasClient {\n  569  \t\treturn false\n  570  \t}\n  571: \tif channel.flags.HasMode(modes.Moderated) && !channel.ClientIsAtLeast(client, modes.Voice) {\n  572  \t\treturn false\n  573  \t}\n  574: \tif channel.flags.HasMode(modes.RegisteredOnly) && client.Account() == \"\" {\n  575  \t\treturn false\n  576  \t}\n  ...\n  579  \n  580  // TagMsg sends a tag message to everyone in this channel who can accept them.\n  581: func (channel *Channel) TagMsg(msgid string, minPrefix *modes.Mode, clientOnlyTags *map[string]ircmsg.TagValue, client *Client, rb *ResponseBuffer) {\n  582  \tchannel.sendMessage(msgid, \"TAGMSG\", []caps.Capability{caps.MessageTags}, minPrefix, clientOnlyTags, client, nil, rb)\n  583  }\n  584  \n  585  // sendMessage sends a given message to everyone on this channel.\n  586: func (channel *Channel) sendMessage(msgid, cmd string, requiredCaps []caps.Capability, minPrefix *modes.Mode, clientOnlyTags *map[string]ircmsg.TagValue, client *Client, message *string, rb *ResponseBuffer) {\n  587  \tif !channel.CanSpeak(client) {\n  588  \t\trb.Add(nil, client.server.name, ERR_CANNOTSENDTOCHAN, channel.name, client.t(\"Cannot send to channel\"))\n  ...\n  591  \n  592  \t// for STATUSMSG\n  593: \tvar minPrefixMode modes.Mode\n  594  \tif minPrefix != nil {\n  595  \t\tminPrefixMode = *minPrefix\n  ...\n  642  \n  643  // SplitPrivMsg sends a private message to everyone in this channel.\n  644: func (channel *Channel) SplitPrivMsg(msgid string, minPrefix *modes.Mode, clientOnlyTags *map[string]ircmsg.TagValue, client *Client, message SplitMessage, rb *ResponseBuffer) {\n  645  \tchannel.sendSplitMessage(msgid, \"PRIVMSG\", minPrefix, clientOnlyTags, client, &message, rb)\n  646  }\n  647  \n  648  // SplitNotice sends a private message to everyone in this channel.\n  649: func (channel *Channel) SplitNotice(msgid string, minPrefix *modes.Mode, clientOnlyTags *map[string]ircmsg.TagValue, client *Client, message SplitMessage, rb *ResponseBuffer) {\n  650  \tchannel.sendSplitMessage(msgid, \"NOTICE\", minPrefix, clientOnlyTags, client, &message, rb)\n  651  }\n  652  \n  653: func (channel *Channel) sendSplitMessage(msgid, cmd string, minPrefix *modes.Mode, clientOnlyTags *map[string]ircmsg.TagValue, client *Client, message *SplitMessage, rb *ResponseBuffer) {\n  654  \tif !channel.CanSpeak(client) {\n  655  \t\trb.Add(nil, client.server.name, ERR_CANNOTSENDTOCHAN, channel.name, client.t(\"Cannot send to channel\"))\n  ...\n  658  \n  659  \t// for STATUSMSG\n  660: \tvar minPrefixMode modes.Mode\n  661  \tif minPrefix != nil {\n  662  \t\tminPrefixMode = *minPrefix\n  ...\n  696  }\n  697  \n  698: func (channel *Channel) applyModeToMember(client *Client, mode modes.Mode, op modes.ModeOp, nick string, rb *ResponseBuffer) (result *modes.ModeChange) {\n  699  \tcasefoldedName, err := CasefoldName(nick)\n  700  \ttarget := channel.server.clients.Get(casefoldedName)\n  ...\n  705  \n  706  \tchannel.stateMutex.Lock()\n  707: \tmodeset, exists := channel.members[target]\n  708  \tif exists {\n  709: \t\tif modeset.SetMode(mode, op == modes.Add) {\n  710: \t\t\tresult = &modes.ModeChange{\n  711  \t\t\t\tOp:   op,\n  712  \t\t\t\tMode: mode,\n  ...\n  724  \n  725  // ShowMaskList shows the given list to the client.\n  726: func (channel *Channel) ShowMaskList(client *Client, mode modes.Mode, rb *ResponseBuffer) {\n  727: \t// choose appropriate modes\n  728  \tvar rpllist, rplendoflist string\n  729: \tif mode == modes.BanMask {\n  730  \t\trpllist = RPL_BANLIST\n  731  \t\trplendoflist = RPL_ENDOFBANLIST\n  732: \t} else if mode == modes.ExceptMask {\n  733  \t\trpllist = RPL_EXCEPTLIST\n  734  \t\trplendoflist = RPL_ENDOFEXCEPTLIST\n  735: \t} else if mode == modes.InviteMask {\n  736  \t\trpllist = RPL_INVITELIST\n  737  \t\trplendoflist = RPL_ENDOFINVITELIST\n  ...\n  749  }\n  750  \n  751: func (channel *Channel) applyModeMask(client *Client, mode modes.Mode, op modes.ModeOp, mask string, rb *ResponseBuffer) bool {\n  752  \tlist := channel.lists[mode]\n  753  \tif list == nil {\n  ...\n  756  \t}\n  757  \n  758: \tif (op == modes.List) || (mask == \"\") {\n  759  \t\tchannel.ShowMaskList(client, mode, rb)\n  760  \t\treturn false\n  761  \t}\n  762  \n  763: \tif !channel.ClientIsAtLeast(client, modes.ChannelOperator) {\n  764  \t\trb.Add(nil, client.server.name, ERR_CHANOPRIVSNEEDED, channel.name, client.t(\"You're not a channel operator\"))\n  765  \t\treturn false\n  766  \t}\n  767  \n  768: \tif op == modes.Add {\n  769  \t\treturn list.Add(mask)\n  770  \t}\n  771  \n  772: \tif op == modes.Remove {\n  773  \t\treturn list.Remove(mask)\n  774  \t}\n  ...\n  798  \n  799  func (channel *Channel) Kick(client *Client, target *Client, comment string, rb *ResponseBuffer) {\n  800: \tif !(client.HasMode(modes.Operator) || channel.hasClient(client)) {\n  801  \t\trb.Add(nil, client.server.name, ERR_NOTONCHANNEL, channel.name, client.t(\"You're not on that channel\"))\n  802  \t\treturn\n  803  \t}\n  804: \tif !channel.ClientIsAtLeast(client, modes.ChannelOperator) {\n  805  \t\trb.Add(nil, client.server.name, ERR_CANNOTSENDTOCHAN, channel.name, client.t(\"Cannot send to channel\"))\n  806  \t\treturn\n  ...\n  823  \ttargetNick := target.Nick()\n  824  \t// check if channel is an auditorium (no joins/parts)\n  825: \tif !channel.flags.HasMode(modes.Auditorium) {\n  826  \t\tfor _, member := range channel.Members() {\n  827  \t\t\tmember.Send(nil, clientMask, \"KICK\", channel.name, targetNick, comment)\n  ...\n  834  // Invite invites the given client to the channel, if the inviter can do so.\n  835  func (channel *Channel) Invite(invitee *Client, inviter *Client, rb *ResponseBuffer) {\n  836: \tif channel.flags.HasMode(modes.InviteOnly) && !channel.ClientIsAtLeast(inviter, modes.ChannelOperator) {\n  837  \t\trb.Add(nil, inviter.server.name, ERR_CHANOPRIVSNEEDED, channel.name, inviter.t(\"You're not a channel operator\"))\n  838  \t\treturn\n  ...\n  845  \n  846  \t//TODO(dan): handle this more nicely, keep a list of last X invited channels on invitee rather than explicitly modifying the invite list?\n  847: \tif channel.flags.HasMode(modes.InviteOnly) {\n  848  \t\tnmc := invitee.NickCasefolded()\n  849  \t\tchannel.stateMutex.Lock()\n  850: \t\tchannel.lists[modes.InviteMask].Add(nmc)\n  851  \t\tchannel.stateMutex.Unlock()\n  852  \t}\n  853  \n  854  \tfor _, member := range channel.Members() {\n  855: \t\tif member.capabilities.Has(caps.InviteNotify) && member != inviter && member != invitee && channel.ClientIsAtLeast(member, modes.Halfop) {\n  856  \t\t\tmember.Send(nil, inviter.NickMaskString(), \"INVITE\", invitee.Nick(), channel.name)\n  857  \t\t}\n  ...\n  861  \trb.Add(nil, inviter.server.name, RPL_INVITING, invitee.nick, channel.name)\n  862  \tinvitee.Send(nil, inviter.nickMaskString, \"INVITE\", invitee.nick, channel.name)\n  863: \tif invitee.HasMode(modes.Away) {\n  864  \t\trb.Add(nil, inviter.server.name, RPL_AWAY, invitee.nick, invitee.awayMessage)\n  865  \t}\n\n/home/kei/Development/oragono/irc/channelreg.go:\n   13  \t\"encoding/json\"\n   14  \n   15: \t\"github.com/unendingPattern/oragono/irc/modes\"\n   16  \t\"github.com/tidwall/buntdb\"\n   17  )\n   ..\n   33  \tkeyChannelPassword       = \"channel.key %s\"\n   34  \tkeyChannelHighLights     = \"channel.highlights %s\"\n   35: \tkeyChannelModes          = \"channel.modes %s\"\n   36  \tkeyChannelAccountToUMode = \"channel.accounttoumode %s\"\n   37  )\n   ..\n   51  \t\tkeyChannelPassword,\n   52  \t\tkeyChannelHighLights,\n   53: \t\tkeyChannelModes,\n   54  \t\tkeyChannelAccountToUMode,\n   55  \t}\n   ..\n   61  \tIncludeInitial uint = 1 << iota\n   62  \tIncludeTopic\n   63: \tIncludeModes\n   64  \tIncludeLists\n   65  )\n   ..\n   84  \t// TopicSetTime represents the time the topic was set.\n   85  \tTopicSetTime time.Time\n   86: \t// Modes represents the channel modes\n   87: \tModes []modes.Mode\n   88  \t// Key represents the channel key / password\n   89  \tKey string\n   90  \t// Group for highlighting all users\n   91  \tHighLight string\n   92: \t// AccountToUMode maps user accounts to their persistent channel modes (e.g., +q, +h)\n   93: \tAccountToUMode map[string]modes.Mode\n   94  \t// Banlist represents the bans set on the channel.\n   95  \tBanlist []string\n   ..\n  167  \t\tpassword, _ := tx.Get(fmt.Sprintf(keyChannelPassword, channelKey))\n  168  \t\thighlights, _ := tx.Get(fmt.Sprintf(keyChannelHighLights, channelKey))\n  169: \t\tmodeString, _ := tx.Get(fmt.Sprintf(keyChannelModes, channelKey))\n  170  \t\tbanlistString, _ := tx.Get(fmt.Sprintf(keyChannelBanlist, channelKey))\n  171  \t\texceptlistString, _ := tx.Get(fmt.Sprintf(keyChannelExceptlist, channelKey))\n  172  \t\tinvitelistString, _ := tx.Get(fmt.Sprintf(keyChannelInvitelist, channelKey))\n  173: \t\taccountToUModeString, _ := tx.Get(fmt.Sprintf(keyChannelAccountToUMode, channelKey))\n  174  \n  175: \t\tmodeSlice := make([]modes.Mode, len(modeString))\n  176: \t\tfor i, mode := range modeString {\n  177: \t\t\tmodeSlice[i] = modes.Mode(mode)\n  178  \t\t}\n  179  \n  ...\n  184  \t\tvar invitelist []string\n  185  \t\t_ = json.Unmarshal([]byte(invitelistString), &invitelist)\n  186: \t\taccountToUMode := make(map[string]modes.Mode)\n  187: \t\t_ = json.Unmarshal([]byte(accountToUModeString), &accountToUMode)\n  188  \n  189  \t\tinfo = &RegisteredChannel{\n  ...\n  196  \t\t\tKey:            password,\n  197  \t\t\tHighLight:      highlights,\n  198: \t\t\tModes:          modeSlice,\n  199  \t\t\tBanlist:        banlist,\n  200  \t\t\tExceptlist:     exceptlist,\n  ...\n  280  \t}\n  281  \n  282: \tif includeFlags&IncludeModes != 0 {\n  283  \t\ttx.Set(fmt.Sprintf(keyChannelPassword, channelKey), channelInfo.Key, nil)\n  284: \t\tmodeStrings := make([]string, len(channelInfo.Modes))\n  285: \t\tfor i, mode := range channelInfo.Modes {\n  286: \t\t\tmodeStrings[i] = string(mode)\n  287  \t\t}\n  288: \t\ttx.Set(fmt.Sprintf(keyChannelModes, channelKey), strings.Join(modeStrings, \"\"), nil)\n  289  \t}\n  290  \n  ...\n  296  \t\tinvitelistString, _ := json.Marshal(channelInfo.Invitelist)\n  297  \t\ttx.Set(fmt.Sprintf(keyChannelInvitelist, channelKey), string(invitelistString), nil)\n  298: \t\taccountToUModeString, _ := json.Marshal(channelInfo.AccountToUMode)\n  299: \t\ttx.Set(fmt.Sprintf(keyChannelAccountToUMode, channelKey), string(accountToUModeString), nil)\n  300  \t}\n  301  }\n\n/home/kei/Development/oragono/irc/chanserv.go:\n   14  \n   15  \t\"github.com/goshuirc/irc-go/ircfmt\"\n   16: \t\"github.com/unendingPattern/oragono/irc/modes\"\n   17  \t\"github.com/unendingPattern/oragono/irc/sno\"\n   18  \t\"github.com/unendingPattern/oragono/irc/utils\"\n   ..\n   48  \n   49  REGISTER lets you own the given channel. If you rejoin this channel, you'll be\n   50: given admin privs on it. Modes set on the channel and the topic will also be\n   51  remembered.`,\n   52  \t\t\thelpShort:    `$bREGISTER$b lets you own a given channel.`,\n   ..\n   74  For example, $bAMODE #channel +o dan$b grants the the holder of the \"dan\"\n   75  account the +o operator mode every time they join #channel. To list current\n   76: accounts and modes, use $bAMODE #channel$b. Note that users are always\n   77  referenced by their registered account names, not their nicknames.`,\n   78  \t\t\thelpShort: `$bAMODE$b modifies persistent mode settings for channel members.`,\n   ..\n   99  \t}\n  100  \n  101: \tmodeChanges, unknown := modes.ParseChannelModeChanges(strings.Fields(modeChange)...)\n  102: \tvar change modes.ModeChange\n  103  \tif len(modeChanges) > 1 || len(unknown) > 0 {\n  104  \t\tcsNotice(rb, client.t(\"Invalid mode change\"))\n  ...\n  107  \t\tchange = modeChanges[0]\n  108  \t} else {\n  109: \t\tchange = modes.ModeChange{Op: modes.List}\n  110  \t}\n  111  \n  ...\n  114  \tchange.Arg, _ = CasefoldName(change.Arg)\n  115  \tswitch change.Op {\n  116: \tcase modes.List:\n  117  \t\taccountIsValid = true\n  118: \tcase modes.Add:\n  119  \t\t// if we're adding a mode, the account must exist\n  120  \t\tif change.Arg != \"\" {\n  ...\n  122  \t\t\taccountIsValid = (err == nil)\n  123  \t\t}\n  124: \tcase modes.Remove:\n  125  \t\t// allow removal of accounts that may have been deleted\n  126  \t\taccountIsValid = (change.Arg != \"\")\n  ...\n  131  \t}\n  132  \n  133: \taffectedModes, err := channel.ProcessAccountToUmodeChange(client, change)\n  134  \n  135  \tif err == errInsufficientPrivs {\n  ...\n  142  \n  143  \tswitch change.Op {\n  144: \tcase modes.List:\n  145: \t\t// sort the persistent modes in descending order of priority\n  146: \t\tsort.Slice(affectedModes, func(i, j int) bool {\n  147: \t\t\treturn umodeGreaterThan(affectedModes[i].Mode, affectedModes[j].Mode)\n  148  \t\t})\n  149: \t\tcsNotice(rb, fmt.Sprintf(client.t(\"Channel %s has %d persistent modes set\"), channelName, len(affectedModes)))\n  150: \t\tfor _, modeChange := range affectedModes {\n  151  \t\t\tcsNotice(rb, fmt.Sprintf(client.t(\"Account %s receives mode +%s\"), modeChange.Arg, string(modeChange.Mode)))\n  152  \t\t}\n  153: \tcase modes.Add, modes.Remove:\n  154: \t\tif len(affectedModes) > 0 {\n  155  \t\t\tcsNotice(rb, fmt.Sprintf(client.t(\"Successfully set mode %s\"), change.String()))\n  156  \t\t} else {\n  ...\n  201  \n  202  \t// give them privs\n  203: \tgivenMode := modes.ChannelOperator\n  204  \tif client == target {\n  205: \t\tgivenMode = modes.ChannelFounder\n  206  \t}\n  207: \tchange := channelInfo.applyModeToMember(target, givenMode, modes.Add, client.NickCasefolded(), rb)\n  208  \tif change != nil {\n  209  \t\t//TODO(dan): we should change the name of String and make it return a slice here\n  210: \t\t//TODO(dan): unify this code with code in modes.go\n  211  \t\targs := append([]string{channelName}, strings.Split(change.String(), \" \")...)\n  212  \t\tfor _, member := range channelInfo.Members() {\n  ...\n  235  \n  236  \tchannelInfo := server.channels.Get(channelKey)\n  237: \tif channelInfo == nil || !channelInfo.ClientIsAtLeast(client, modes.ChannelOperator) {\n  238  \t\tcsNotice(rb, client.t(\"You must be an oper on the channel to register it\"))\n  239  \t\treturn\n  ...\n  256  \n  257  \t// give them founder privs\n  258: \tchange := channelInfo.applyModeToMember(client, modes.ChannelFounder, modes.Add, client.NickCasefolded(), rb)\n  259  \tif change != nil {\n  260  \t\t//TODO(dan): we should change the name of String and make it return a slice here\n  261: \t\t//TODO(dan): unify this code with code in modes.go\n  262  \t\targs := append([]string{channelName}, strings.Split(change.String(), \" \")...)\n  263  \t\tfor _, member := range channelInfo.Members() {\n\n/home/kei/Development/oragono/irc/client.go:\n   20  \tident \"github.com/oragono/go-ident\"\n   21  \t\"github.com/unendingPattern/oragono/irc/caps\"\n   22: \t\"github.com/unendingPattern/oragono/irc/modes\"\n   23  \t\"github.com/unendingPattern/oragono/irc/sno\"\n   24  \t\"github.com/unendingPattern/oragono/irc/utils\"\n   ..\n   49  \texitedSnomaskSent  bool\n   50  \tfakelag            *Fakelag\n   51: \tflags              *modes.ModeSet\n   52  \thasQuit            bool\n   53  \thops               int\n   ..\n   98  \t\tchannels:       make(ChannelSet),\n   99  \t\tctime:          now,\n  100: \t\tflags:          modes.NewModeSet(),\n  101  \t\tserver:         server,\n  102  \t\tsocket:         socket,\n  ...\n  109  \tclient.recomputeMaxlens()\n  110  \tif isTLS {\n  111: \t\tclient.SetMode(modes.TLS, true)\n  112  \n  113  \t\t// error is not useful to us here anyways so we can ignore it\n  ...\n  388  \t}\n  389  \n  390: \tif !oldClient.HasMode(modes.TLS) || !client.HasMode(modes.TLS) {\n  391  \t\tclient.Send(nil, server.name, ERR_CANNOT_RESUME, oldnick, client.t(\"Cannot resume connection, old and new clients must have TLS\"))\n  392  \t\treturn\n  ...\n  428  \t\tclient.resumeDetails.SendFakeJoinsFor = append(client.resumeDetails.SendFakeJoinsFor, channel.name)\n  429  \n  430: \t\toldModeSet := channel.members[oldClient]\n  431  \t\tchannel.members.Remove(oldClient)\n  432: \t\tchannel.members[client] = oldModeSet\n  433  \t\tchannel.stateMutex.Unlock()\n  434  \n  435  \t\tchannel.regenerateMembersCache()\n  436  \n  437: \t\t// construct fake modestring if necessary\n  438: \t\toldModes := oldModeSet.String()\n  439  \t\tvar params []string\n  440: \t\tif 0 < len(oldModes) {\n  441: \t\t\tparams = []string{channel.name, \"+\" + oldModes}\n  442: \t\t\tfor range oldModes {\n  443  \t\t\t\tparams = append(params, client.nick)\n  444  \t\t\t}\n  ...\n  457  \t\t\t}\n  458  \n  459: \t\t\t// send fake modestring if necessary\n  460: \t\t\tif 0 < len(oldModes) {\n  461  \t\t\t\tmember.Send(nil, server.name, \"MODE\", params...)\n  462  \t\t\t}\n  ...\n  520  }\n  521  \n  522: // ModeString returns the mode string for this client.\n  523: func (client *Client) ModeString() (str string) {\n  524  \treturn \"+\" + client.flags.String()\n  525  }\n  ...\n  818  \t\t\tclient.server.stats.ChangeTotal(-1)\n  819  \t\t}\n  820: \t\tif client.HasMode(modes.Invisible) {\n  821  \t\t\tclient.server.stats.ChangeInvisible(-1)\n  822  \t\t}\n  823: \t\tif client.HasMode(modes.Operator) || client.HasMode(modes.LocalOperator) {\n  824  \t\t\tclient.server.stats.ChangeOperators(-1)\n  825  \t\t}\n\n/home/kei/Development/oragono/irc/commands.go:\n    8  import (\n    9  \t\"github.com/goshuirc/irc-go/ircmsg\"\n   10: \t\"github.com/unendingPattern/oragono/irc/modes\"\n   11  )\n   12  \n   ..\n   28  \t\treturn false\n   29  \t}\n   30: \tif cmd.oper && !client.HasMode(modes.Operator) {\n   31  \t\tclient.Send(nil, server.name, ERR_NOPRIVILEGES, client.nick, client.t(\"Permission Denied - You're not an IRC operator\"))\n   32  \t\treturn false\n\n/home/kei/Development/oragono/irc/config.go:\n   24  \t\"github.com/unendingPattern/oragono/irc/languages\"\n   25  \t\"github.com/unendingPattern/oragono/irc/logger\"\n   26: \t\"github.com/unendingPattern/oragono/irc/modes\"\n   27  \t\"github.com/unendingPattern/oragono/irc/passwd\"\n   28  \t\"github.com/unendingPattern/oragono/irc/utils\"\n   ..\n  151  \tWhoisLine string `yaml:\"whois-line\"`\n  152  \tPassword  string\n  153: \tModes     string\n  154  }\n  155  \n  ...\n  163  type Limits struct {\n  164  \tAwayLen        int           `yaml:\"awaylen\"`\n  165: \tChanListModes  int           `yaml:\"chan-list-modes\"`\n  166  \tChannelLen     int           `yaml:\"channellen\"`\n  167  \tKickLen        int           `yaml:\"kicklen\"`\n  ...\n  243  \n  244  \tChannels struct {\n  245: \t\tDefaultModes *string `yaml:\"default-modes\"`\n  246: \t\tdefaultModes modes.Modes\n  247  \t\tRegistration ChannelRegistrationConfig\n  248  \t}\n  ...\n  354  \tVhost     string\n  355  \tPass      []byte\n  356: \tModes     []modes.ModeChange\n  357  }\n  358  \n  ...\n  386  \t\t\toper.WhoisLine = class.WhoisLine\n  387  \t\t}\n  388: \t\tmodeStr := strings.TrimSpace(opConf.Modes)\n  389: \t\tmodeChanges, unknownChanges := modes.ParseUserModeChanges(strings.Split(modeStr, \" \")...)\n  390  \t\tif len(unknownChanges) > 0 {\n  391: \t\t\treturn nil, fmt.Errorf(\"Could not load operator [%s] due to unknown modes %v\", name, unknownChanges)\n  392  \t\t}\n  393: \t\toper.Modes = modeChanges\n  394  \n  395  \t\t// successful, attach to list of opers\n  ...\n  699  \tconfig.operators = opers\n  700  \n  701: \t// parse default channel modes\n  702: \tconfig.Channels.defaultModes = ParseDefaultChannelModes(config.Channels.DefaultModes)\n  703  \n  704  \tif config.Server.Password != \"\" {\n\n/home/kei/Development/oragono/irc/database.go:\n   13  \t\"time\"\n   14  \n   15: \t\"github.com/unendingPattern/oragono/irc/modes\"\n   16  \t\"github.com/unendingPattern/oragono/irc/utils\"\n   17  \n   ..\n  228  // 1. channel founder names should be casefolded\n  229  // 2. founder should be explicitly granted the ChannelFounder user mode\n  230: // 3. explicitly initialize stored channel modes to the server default values\n  231  func schemaChangeV2ToV3(config *Config, tx *buntdb.Tx) error {\n  232  \tvar channels []string\n  ...\n  250  \t\t\tif err == nil {\n  251  \t\t\t\ttx.Set(founderKey, founder, nil)\n  252: \t\t\t\taccountToUmode := map[string]modes.Mode{\n  253: \t\t\t\t\tfounder: modes.ChannelFounder,\n  254  \t\t\t\t}\n  255  \t\t\t\tatustr, _ := json.Marshal(accountToUmode)\n  ...\n  259  \t}\n  260  \n  261: \t// explicitly store the channel modes\n  262: \tdefaultModes := config.Channels.defaultModes\n  263: \tmodeStrings := make([]string, len(defaultModes))\n  264: \tfor i, mode := range defaultModes {\n  265: \t\tmodeStrings[i] = string(mode)\n  266  \t}\n  267: \tdefaultModeString := strings.Join(modeStrings, \"\")\n  268  \tfor _, channel := range channels {\n  269: \t\ttx.Set(\"channel.modes \"+channel, defaultModeString, nil)\n  270  \t}\n  271  \n\n/home/kei/Development/oragono/irc/gateways.go:\n   12  \t\"strings\"\n   13  \n   14: \t\"github.com/unendingPattern/oragono/irc/modes\"\n   15  \t\"github.com/unendingPattern/oragono/irc/utils\"\n   16  )\n   ..\n   96  \t// set tls info\n   97  \tclient.certfp = \"\"\n   98: \tclient.SetMode(modes.TLS, tls)\n   99  \n  100  \treturn true\n\n/home/kei/Development/oragono/irc/getters.go:\n    6  import (\n    7  \t\"github.com/unendingPattern/oragono/irc/isupport\"\n    8: \t\"github.com/unendingPattern/oragono/irc/modes\"\n    9  )\n   10  \n   ..\n   41  }\n   42  \n   43: func (server *Server) DefaultChannelModes() modes.Modes {\n   44: \treturn server.Config().Channels.defaultModes\n   45  }\n   46  \n   ..\n  183  }\n  184  \n  185: func (client *Client) HasMode(mode modes.Mode) bool {\n  186  \t// client.flags has its own synch\n  187  \treturn client.flags.HasMode(mode)\n  188  }\n  189  \n  190: func (client *Client) SetMode(mode modes.Mode, on bool) bool {\n  191  \treturn client.flags.SetMode(mode, on)\n  192  }\n\n/home/kei/Development/oragono/irc/handlers.go:\n   28  \t\"github.com/unendingPattern/oragono/irc/caps\"\n   29  \t\"github.com/unendingPattern/oragono/irc/custime\"\n   30: \t\"github.com/unendingPattern/oragono/irc/modes\"\n   31  \t\"github.com/unendingPattern/oragono/irc/sno\"\n   32  \t\"github.com/unendingPattern/oragono/irc/utils\"\n   ..\n  408  \t}\n  409  \n  410: \tclient.SetMode(modes.Away, isAway)\n  411  \tclient.awayMessage = text\n  412  \n  413: \tvar op modes.ModeOp\n  414  \tif isAway {\n  415: \t\top = modes.Add\n  416  \t\trb.Add(nil, server.name, RPL_NOWAWAY, client.nick, client.t(\"You have been marked as being away\"))\n  417  \t} else {\n  418: \t\top = modes.Remove\n  419  \t\trb.Add(nil, server.name, RPL_UNAWAY, client.nick, client.t(\"You are no longer marked as being away\"))\n  420  \t}\n  421  \t//TODO(dan): Should this be sent automagically as part of setting the flag/mode?\n  422: \tmodech := modes.ModeChanges{modes.ModeChange{\n  423: \t\tMode: modes.Away,\n  424  \t\tOp:   op,\n  425  \t}}\n  ...\n  773  \t// handle index\n  774  \tif argument == \"index\" {\n  775: \t\tif client.HasMode(modes.Operator) {\n  776  \t\t\tclient.sendHelp(\"HELP\", GetHelpIndex(client.languages, HelpIndexOpers), rb)\n  777  \t\t} else {\n  ...\n  783  \thelpHandler, exists := Help[argument]\n  784  \n  785: \tif exists && (!helpHandler.oper || (helpHandler.oper && client.HasMode(modes.Operator))) {\n  786  \t\tif helpHandler.textGenerator != nil {\n  787  \t\t\tclient.sendHelp(strings.ToUpper(argument), client.t(helpHandler.textGenerator(client)), rb)\n  ...\n 1286  \t}\n 1287  \n 1288: \tclientIsOp := client.HasMode(modes.Operator)\n 1289  \tif len(channels) == 0 {\n 1290  \t\tfor _, channel := range server.channels.Channels() {\n 1291: \t\t\tif !clientIsOp && channel.flags.HasMode(modes.Secret) {\n 1292  \t\t\t\tcontinue\n 1293  \t\t\t}\n ....\n 1305  \t\t\tcasefoldedChname, err := CasefoldChannel(chname)\n 1306  \t\t\tchannel := server.channels.Get(casefoldedChname)\n 1307: \t\t\tif err != nil || channel == nil || (!clientIsOp && channel.flags.HasMode(modes.Secret)) {\n 1308  \t\t\t\tif len(chname) > 0 {\n 1309  \t\t\t\t\trb.Add(nil, server.name, ERR_NOSUCHCHANNEL, client.nick, chname, client.t(\"No such channel\"))\n ....\n 1333  }\n 1334  \n 1335: // MODE <target> [<modestring> [<mode arguments>...]]\n 1336  func modeHandler(server *Server, client *Client, msg ircmsg.IrcMessage, rb *ResponseBuffer) bool {\n 1337  \t_, errChan := CasefoldChannel(msg.Params[0])\n ....\n 1343  }\n 1344  \n 1345: // MODE <channel> [<modestring> [<mode arguments>...]]\n 1346  func cmodeHandler(server *Server, client *Client, msg ircmsg.IrcMessage, rb *ResponseBuffer) bool {\n 1347  \tchannelName, err := CasefoldChannel(msg.Params[0])\n ....\n 1354  \n 1355  \t// applied mode changes\n 1356: \tapplied := make(modes.ModeChanges, 0)\n 1357  \n 1358  \tif 1 < len(msg.Params) {\n 1359  \t\t// parse out real mode changes\n 1360  \t\tparams := msg.Params[1:]\n 1361: \t\tchanges, unknown := modes.ParseChannelModeChanges(params...)\n 1362  \n 1363  \t\t// alert for unknown mode changes\n ....\n 1376  \tvar includeFlags uint\n 1377  \tfor _, change := range applied {\n 1378: \t\tincludeFlags |= IncludeModes\n 1379: \t\tif change.Mode == modes.BanMask || change.Mode == modes.ExceptMask || change.Mode == modes.InviteMask {\n 1380  \t\t\tincludeFlags |= IncludeLists\n 1381  \t\t}\n ....\n 1398  \t\t}\n 1399  \t} else {\n 1400: \t\targs := append([]string{client.nick, channel.name}, channel.modeStrings(client)...)\n 1401  \t\trb.Add(nil, client.nickMaskString, RPL_CHANNELMODEIS, args...)\n 1402  \t\trb.Add(nil, client.nickMaskString, RPL_CHANNELCREATED, client.nick, channel.name, strconv.FormatInt(channel.createdTime.Unix(), 10))\n ....\n 1405  }\n 1406  \n 1407: // MODE <client> [<modestring> [<mode arguments>...]]\n 1408  func umodeHandler(server *Server, client *Client, msg ircmsg.IrcMessage, rb *ResponseBuffer) bool {\n 1409  \tnickname, err := CasefoldName(msg.Params[0])\n ....\n 1421  \tif !hasPrivs {\n 1422  \t\tif len(msg.Params) > 1 {\n 1423: \t\t\trb.Add(nil, server.name, ERR_USERSDONTMATCH, client.nick, client.t(\"Can't change modes for other users\"))\n 1424  \t\t} else {\n 1425: \t\t\trb.Add(nil, server.name, ERR_USERSDONTMATCH, client.nick, client.t(\"Can't view modes for other users\"))\n 1426  \t\t}\n 1427  \t\treturn false\n ....\n 1429  \n 1430  \t// applied mode changes\n 1431: \tapplied := make(modes.ModeChanges, 0)\n 1432  \n 1433  \tif 1 < len(msg.Params) {\n 1434  \t\t// parse out real mode changes\n 1435  \t\tparams := msg.Params[1:]\n 1436: \t\tchanges, unknown := modes.ParseUserModeChanges(params...)\n 1437  \n 1438  \t\t// alert for unknown mode changes\n ....\n 1451  \t\trb.Add(nil, client.nickMaskString, \"MODE\", targetNick, applied.String())\n 1452  \t} else if hasPrivs {\n 1453: \t\trb.Add(nil, target.nickMaskString, RPL_UMODEIS, targetNick, target.ModeString())\n 1454: \t\tif client.HasMode(modes.LocalOperator) || client.HasMode(modes.Operator) {\n 1455  \t\t\tmasks := server.snomasks.String(client)\n 1456  \t\t\tif 0 < len(masks) {\n ....\n 1620  \tif len(channels) == 0 {\n 1621  \t\tfor _, channel := range server.channels.Channels() {\n 1622: \t\t\tif !channel.flags.HasMode(modes.Auditorium) {\n 1623  \t\t\t\tchannel.Names(client, rb)\n 1624  \t\t\t}\n ....\n 1629  \tfor _, chname := range channels {\n 1630  \t\tchannel := server.channels.Get(chname)\n 1631: \t\tif !channel.flags.HasMode(modes.Auditorium) {\n 1632  \t\t\tif channel != nil {\n 1633  \t\t\t\tchannel.Names(client, rb)\n ....\n 1664  \t\t\tbreak\n 1665  \t\t}\n 1666: \t\tprefixes, targetString := modes.SplitChannelMembershipPrefixes(targetString)\n 1667: \t\tlowestPrefix := modes.GetLowestChannelModePrefix(prefixes)\n 1668  \n 1669  \t\ttarget, cerr := CasefoldChannel(targetString)\n ....\n 1702  \t\t\t// restrict messages appropriately when +R is set\n 1703  \t\t\t// intentionally make the sending user think the message went through fine\n 1704: \t\t\tif !user.HasMode(modes.RegisteredOnly) || client.LoggedIntoAccount() {\n 1705  \t\t\t\tuser.SendSplitMsgFromClient(msgid, client, clientOnlyTags, \"NOTICE\", user.nick, splitMsg)\n 1706  \t\t\t}\n ....\n 1752  // OPER <name> <password>\n 1753  func operHandler(server *Server, client *Client, msg ircmsg.IrcMessage, rb *ResponseBuffer) bool {\n 1754: \tif client.HasMode(modes.Operator) == true {\n 1755  \t\trb.Add(nil, server.name, ERR_UNKNOWNERROR, \"OPER\", client.t(\"You're already opered-up!\"))\n 1756  \t\treturn false\n ....\n 1775  \t}\n 1776  \n 1777: \t// set new modes: modes.Operator, plus anything specified in the config\n 1778: \tmodeChanges := make([]modes.ModeChange, len(oper.Modes)+1)\n 1779: \tmodeChanges[0] = modes.ModeChange{\n 1780: \t\tMode: modes.Operator,\n 1781: \t\tOp:   modes.Add,\n 1782  \t}\n 1783: \tcopy(modeChanges[1:], oper.Modes)\n 1784  \tapplied := ApplyUserModeChanges(client, modeChanges, true)\n 1785  \n ....\n 1864  \t\t\tbreak\n 1865  \t\t}\n 1866: \t\tprefixes, targetString := modes.SplitChannelMembershipPrefixes(targetString)\n 1867: \t\tlowestPrefix := modes.GetLowestChannelModePrefix(prefixes)\n 1868  \n 1869  \t\t// eh, no need to notify them\n ....\n 1886  \t\t\tchannel.SplitPrivMsg(msgid, lowestPrefix, clientOnlyTags, client, splitMsg, rb)\n 1887  \n 1888: \t\t\tif channel.flags.HasMode(modes.LinkInfo) {\n 1889  \t\t\t\tif xurls.Relaxed().FindString(message) != \"\" {\n 1890  \t\t\t\t\tsubmatchall := xurls.Relaxed().FindAllString(message, -1)\n ....\n 1948  \t\t\t// restrict messages appropriately when +R is set\n 1949  \t\t\t// intentionally make the sending user think the message went through fine\n 1950: \t\t\tif !user.HasMode(modes.RegisteredOnly) || client.LoggedIntoAccount() {\n 1951  \t\t\t\tuser.SendSplitMsgFromClient(msgid, client, clientOnlyTags, \"PRIVMSG\", user.nick, splitMsg)\n 1952  \t\t\t}\n ....\n 1954  \t\t\t\trb.AddSplitMessageFromClient(msgid, client, clientOnlyTags, \"PRIVMSG\", user.nick, splitMsg)\n 1955  \t\t\t}\n 1956: \t\t\tif user.HasMode(modes.Away) {\n 1957  \t\t\t\t//TODO(dan): possibly implement cooldown of away notifications to users\n 1958  \t\t\t\trb.Add(nil, server.name, RPL_AWAY, user.nick, user.awayMessage)\n ....\n 2032  \t}\n 2033  \t//TODO(dan): allow IRCops to do this?\n 2034: \tif !channel.ClientIsAtLeast(client, modes.Operator) {\n 2035  \t\terrorResponse(errRenamePrivsNeeded, oldName)\n 2036  \t\treturn\n ....\n 2141  \t\t\tbreak\n 2142  \t\t}\n 2143: \t\tprefixes, targetString := modes.SplitChannelMembershipPrefixes(targetString)\n 2144: \t\tlowestPrefix := modes.GetLowestChannelModePrefix(prefixes)\n 2145  \n 2146  \t\t// eh, no need to notify them\n ....\n 2182  \t\t\t\trb.AddFromClient(msgid, client, clientOnlyTags, \"TAGMSG\", user.nick)\n 2183  \t\t\t}\n 2184: \t\t\tif user.HasMode(modes.Away) {\n 2185  \t\t\t\t//TODO(dan): possibly implement cooldown of away notifications to users\n 2186  \t\t\t\trb.Add(nil, server.name, RPL_AWAY, user.nick, user.awayMessage)\n ....\n 2411  \t\tvar isOper, isAway string\n 2412  \n 2413: \t\tif target.HasMode(modes.Operator) {\n 2414  \t\t\tisOper = \"*\"\n 2415  \t\t}\n 2416: \t\tif target.HasMode(modes.Away) {\n 2417  \t\t\tisAway = \"-\"\n 2418  \t\t} else {\n ....\n 2455  \t\t\tif lkey == \"tls\" || lkey == \"secure\" {\n 2456  \t\t\t\t// only accept \"tls\" flag if the gateway's connection to us is secure as well\n 2457: \t\t\t\tif client.HasMode(modes.TLS) || utils.AddrIsLocal(client.socket.conn.RemoteAddr()) {\n 2458  \t\t\t\t\tsecure = true\n 2459  \t\t\t\t}\n ....\n 2549  \t}\n 2550  \n 2551: \tif client.HasMode(modes.Operator) {\n 2552  \t\tmasks := strings.Split(masksString, \",\")\n 2553  \t\tfor _, mask := range masks {\n\n/home/kei/Development/oragono/irc/help.go:\n   35  // used for duplicates\n   36  var (\n   37: \tcmodeHelpText = `== Channel Modes ==\n   38  \n   39: Oragono supports the following channel modes:\n   40  \n   41    +b  |  Client masks that are banned from the channel (e.g. *!*@127.0.0.1)\n   ..\n   59    +h (%)  |  Halfop channel mode.\n   60    +v (+)  |  Voice channel mode.`\n   61: \tumodeHelpText = `== User Modes ==\n   62  \n   63: Oragono supports the following user modes:\n   64  \n   65    +a  |  User is marked as being away. This mode is set with the /AWAY command.\n   ..\n  284  \t},\n  285  \t\"mode\": {\n  286: \t\ttext: `MODE <target> [<modestring> [<mode arguments>...]]\n  287  \n  288: Sets and removes modes from the given target. For more specific information on\n  289: mode characters, see the help for \"modes\".`,\n  290  \t},\n  291  \t\"monitor\": {\n  ...\n  410  \t\"samode\": {\n  411  \t\toper: true,\n  412: \t\ttext: `SAMODE <target> [<modestring> [<mode arguments>...]]\n  413  \n  414: Forcibly sets and removes modes from the given target -- only available to\n  415  opers. For more specific information on mode characters, see the help for\n  416  \"cmode\" and \"umode\".`,\n  ...\n  521  \n  522  \t// Informational\n  523: \t\"modes\": {\n  524: \t\ttextGenerator: modesTextGenerator,\n  525  \t\thelpType:      InformationHelpEntry,\n  526  \t},\n  ...\n  529  \t\thelpType: InformationHelpEntry,\n  530  \t},\n  531: \t\"cmodes\": {\n  532  \t\ttext:      cmodeHelpText,\n  533  \t\thelpType:  InformationHelpEntry,\n  ...\n  538  \t\thelpType: InformationHelpEntry,\n  539  \t},\n  540: \t\"umodes\": {\n  541  \t\ttext:      umodeHelpText,\n  542  \t\thelpType:  InformationHelpEntry,\n  ...\n  578  }\n  579  \n  580: // modesTextGenerator generates the text for the 'modes' help entry.\n  581  // it exists only so we can translate this entry appropriately.\n  582: func modesTextGenerator(client *Client) string {\n  583  \treturn client.t(cmodeHelpText) + \"\\n\\n\" + client.t(umodeHelpText)\n  584  }\n\n/home/kei/Development/oragono/irc/modes.go:\n   10  \t\"strings\"\n   11  \n   12: \t\"github.com/unendingPattern/oragono/irc/modes\"\n   13  \t\"github.com/unendingPattern/oragono/irc/sno\"\n   14  )\n   15  \n   16  var (\n   17: \t// DefaultChannelModes are enabled on brand new channels when they're created.\n   18: \t// this can be overridden in the `channels` config, with the `default-modes` key\n   19: \tDefaultChannelModes = modes.Modes{\n   20: \t\tmodes.NoOutside, modes.OpOnlyTopic,\n   21  \t}\n   22  )\n   23  \n   24  // ApplyUserModeChanges applies the given changes, and returns the applied changes.\n   25: func ApplyUserModeChanges(client *Client, changes modes.ModeChanges, force bool) modes.ModeChanges {\n   26: \tapplied := make(modes.ModeChanges, 0)\n   27  \n   28  \tfor _, change := range changes {\n   29  \t\tswitch change.Mode {\n   30: \t\tcase modes.Bot, modes.Invisible, modes.WallOps, modes.UserRoleplaying, modes.Operator, modes.LocalOperator, modes.RegisteredOnly:\n   31  \t\t\tswitch change.Op {\n   32: \t\t\tcase modes.Add:\n   33: \t\t\t\tif !force && (change.Mode == modes.Operator || change.Mode == modes.LocalOperator) {\n   34  \t\t\t\t\tcontinue\n   35  \t\t\t\t}\n   36  \n   37  \t\t\t\tif client.SetMode(change.Mode, true) {\n   38: \t\t\t\t\tif change.Mode == modes.Invisible {\n   39  \t\t\t\t\t\tclient.server.stats.ChangeInvisible(1)\n   40: \t\t\t\t\t} else if change.Mode == modes.Operator || change.Mode == modes.LocalOperator {\n   41  \t\t\t\t\t\tclient.server.stats.ChangeOperators(1)\n   42  \t\t\t\t\t}\n   ..\n   44  \t\t\t\t}\n   45  \n   46: \t\t\tcase modes.Remove:\n   47  \t\t\t\tif client.SetMode(change.Mode, false) {\n   48: \t\t\t\t\tif change.Mode == modes.Invisible {\n   49  \t\t\t\t\t\tclient.server.stats.ChangeInvisible(-1)\n   50: \t\t\t\t\t} else if change.Mode == modes.Operator || change.Mode == modes.LocalOperator {\n   51  \t\t\t\t\t\tclient.server.stats.ChangeOperators(-1)\n   52  \t\t\t\t\t}\n   ..\n   55  \t\t\t}\n   56  \n   57: \t\tcase modes.ServerNotice:\n   58: \t\t\tif !client.HasMode(modes.Operator) {\n   59  \t\t\t\tcontinue\n   60  \t\t\t}\n   61  \t\t\tvar masks []sno.Mask\n   62: \t\t\tif change.Op == modes.Add || change.Op == modes.Remove {\n   63  \t\t\t\tvar newArg string\n   64  \t\t\t\tfor _, char := range change.Arg {\n   ..\n   71  \t\t\t\tchange.Arg = newArg\n   72  \t\t\t}\n   73: \t\t\tif change.Op == modes.Add {\n   74  \t\t\t\tclient.server.snomasks.AddMasks(client, masks...)\n   75  \t\t\t\tapplied = append(applied, change)\n   76: \t\t\t} else if change.Op == modes.Remove {\n   77  \t\t\t\tclient.server.snomasks.RemoveMasks(client, masks...)\n   78  \t\t\t\tapplied = append(applied, change)\n   ..\n   87  }\n   88  \n   89: // ParseDefaultChannelModes parses the `default-modes` line of the config\n   90: func ParseDefaultChannelModes(rawModes *string) modes.Modes {\n   91: \tif rawModes == nil {\n   92  \t\t// not present in config, fall back to compile-time default\n   93: \t\treturn DefaultChannelModes\n   94  \t}\n   95: \tmodeChangeStrings := strings.Fields(*rawModes)\n   96: \tmodeChanges, _ := modes.ParseChannelModeChanges(modeChangeStrings...)\n   97: \tdefaultChannelModes := make(modes.Modes, 0)\n   98  \tfor _, modeChange := range modeChanges {\n   99: \t\tif modeChange.Op == modes.Add {\n  100: \t\t\tdefaultChannelModes = append(defaultChannelModes, modeChange.Mode)\n  101  \t\t}\n  102  \t}\n  103: \treturn defaultChannelModes\n  104  }\n  105  \n  106  // ApplyChannelModeChanges applies a given set of mode changes.\n  107: func (channel *Channel) ApplyChannelModeChanges(client *Client, isSamode bool, changes modes.ModeChanges, rb *ResponseBuffer) modes.ModeChanges {\n  108  \t// so we only output one warning for each list type when full\n  109: \tlistFullWarned := make(map[modes.Mode]bool)\n  110  \n  111  \tvar alreadySentPrivError bool\n  112  \n  113: \tapplied := make(modes.ModeChanges, 0)\n  114  \n  115: \tisListOp := func(change modes.ModeChange) bool {\n  116: \t\treturn (change.Op == modes.List) || (change.Arg == \"\")\n  117  \t}\n  118  \n  119: \thasPrivs := func(change modes.ModeChange) bool {\n  120  \t\tif isSamode {\n  121  \t\t\treturn true\n  122  \t\t}\n  123  \t\tswitch change.Mode {\n  124: \t\tcase modes.ChannelFounder, modes.ChannelAdmin, modes.ChannelOperator, modes.Halfop, modes.Voice:\n  125: \t\t\t// List on these modes is a no-op anyway\n  126: \t\t\tif change.Op == modes.List {\n  127  \t\t\t\treturn true\n  128  \t\t\t}\n  ...\n  130  \t\t\tisSelfChange := cfarg == client.NickCasefolded()\n  131  \t\t\t// Admins can't give other people Admin or remove it from others\n  132: \t\t\tif change.Mode == modes.ChannelAdmin && !isSelfChange {\n  133  \t\t\t\treturn false\n  134  \t\t\t}\n  135: \t\t\tif change.Op == modes.Remove && isSelfChange {\n  136  \t\t\t\t// \"There is no restriction, however, on anyone `deopping' themselves\"\n  137  \t\t\t\t// <https://tools.ietf.org/html/rfc2812#section-3.1.5>\n  ...\n  139  \t\t\t}\n  140  \t\t\treturn channel.ClientIsAtLeast(client, change.Mode)\n  141: \t\tcase modes.BanMask:\n  142  \t\t\t// #163: allow unprivileged users to list ban masks\n  143: \t\t\treturn isListOp(change) || channel.ClientIsAtLeast(client, modes.ChannelOperator)\n  144  \t\tdefault:\n  145: \t\t\treturn channel.ClientIsAtLeast(client, modes.ChannelOperator)\n  146  \t\t}\n  147  \t}\n  ...\n  157  \n  158  \t\tswitch change.Mode {\n  159: \t\tcase modes.BanMask, modes.ExceptMask, modes.InviteMask:\n  160  \t\t\tif isListOp(change) {\n  161  \t\t\t\tchannel.ShowMaskList(client, change.Mode, rb)\n  ...\n  170  \n  171  \t\t\tswitch change.Op {\n  172: \t\t\tcase modes.Add:\n  173: \t\t\t\tif channel.lists[change.Mode].Length() >= client.server.Limits().ChanListModes {\n  174  \t\t\t\t\tif !listFullWarned[change.Mode] {\n  175  \t\t\t\t\t\trb.Add(nil, client.server.name, ERR_BANLISTFULL, client.Nick(), channel.Name(), change.Mode.String(), client.t(\"Channel list is full\"))\n  ...\n  182  \t\t\t\tapplied = append(applied, change)\n  183  \n  184: \t\t\tcase modes.Remove:\n  185  \t\t\t\tchannel.lists[change.Mode].Remove(mask)\n  186  \t\t\t\tapplied = append(applied, change)\n  187  \t\t\t}\n  188  \n  189: \t\tcase modes.UserLimit:\n  190  \t\t\tswitch change.Op {\n  191: \t\t\tcase modes.Add:\n  192  \t\t\t\tval, err := strconv.ParseUint(change.Arg, 10, 64)\n  193  \t\t\t\tif err == nil {\n  ...\n  196  \t\t\t\t}\n  197  \n  198: \t\t\tcase modes.Remove:\n  199  \t\t\t\tchannel.setUserLimit(0)\n  200  \t\t\t\tapplied = append(applied, change)\n  201  \t\t\t}\n  202  \n  203: \t\tcase modes.HighLight:\n  204  \t\t\tswitch change.Op {\n  205: \t\t\tcase modes.Add:\n  206  \t\t\t\tchannel.setHighLights(change.Arg)\n  207  \n  208: \t\t\tcase modes.Remove:\n  209  \t\t\t\tchannel.setHighLights(\"\")\n  210  \t\t\t}\n  211  \t\t\tapplied = append(applied, change)\n  212  \n  213: \t\tcase modes.Key:\n  214  \t\t\tswitch change.Op {\n  215: \t\t\tcase modes.Add:\n  216  \t\t\t\tchannel.setKey(change.Arg)\n  217  \n  218: \t\t\tcase modes.Remove:\n  219  \t\t\t\tchannel.setKey(\"\")\n  220  \t\t\t}\n  221  \t\t\tapplied = append(applied, change)\n  222  \n  223: \t\tcase modes.InviteOnly, modes.Moderated, modes.NoOutside, modes.OpOnlyTopic, modes.RegisteredOnly, modes.Secret, modes.ChanRoleplaying, modes.Auditorium, modes.LinkInfo:\n  224: \t\t\tif change.Op == modes.List {\n  225  \t\t\t\tcontinue\n  226  \t\t\t}\n  227  \n  228: \t\t\tif channel.flags.SetMode(change.Mode, change.Op == modes.Add) {\n  229  \t\t\t\tapplied = append(applied, change)\n  230  \t\t\t}\n  231  \n  232: \t\tcase modes.ChannelFounder, modes.ChannelAdmin, modes.ChannelOperator, modes.Halfop, modes.Voice:\n  233: \t\t\tif change.Op == modes.List {\n  234  \t\t\t\tcontinue\n  235  \t\t\t}\n  ...\n  252  \n  253  // tests whether l > r, in the channel-user mode ordering (e.g., Halfop > Voice)\n  254: func umodeGreaterThan(l modes.Mode, r modes.Mode) bool {\n  255: \tfor _, mode := range modes.ChannelUserModes {\n  256  \t\tif l == mode && r != mode {\n  257  \t\t\treturn true\n  ...\n  263  }\n  264  \n  265: // ProcessAccountToUmodeChange processes Add/Remove/List operations for channel persistent usermodes.\n  266: func (channel *Channel) ProcessAccountToUmodeChange(client *Client, change modes.ModeChange) (results []modes.ModeChange, err error) {\n  267: \thasPrivsOver := func(l modes.Mode, r modes.Mode) bool {\n  268: \t\tif l == modes.ChannelAdmin {\n  269  \t\t\treturn umodeGreaterThan(l, r)\n  270  \t\t}\n  ...\n  280  \tclientMode := channel.accountToUMode[account]\n  281  \ttargetModeNow := channel.accountToUMode[change.Arg]\n  282: \tvar targetModeAfter modes.Mode\n  283: \tif change.Op == modes.Add {\n  284  \t\ttargetModeAfter = change.Mode\n  285  \t}\n  ...\n  288  \thasPrivs := isOperChange || (account != \"\" && account == channel.registeredFounder)\n  289  \t// halfop and up can list, and do add/removes at levels <= their own\n  290: \tif change.Op == modes.List && hasPrivsOver(clientMode, modes.Halfop) {\n  291  \t\thasPrivs = true\n  292: \t} else if hasPrivsOver(clientMode, modes.Halfop) && hasPrivsOver(clientMode, targetModeNow) && hasPrivsOver(clientMode, targetModeAfter) {\n  293  \t\thasPrivs = true\n  294  \t}\n  ...\n  298  \n  299  \tswitch change.Op {\n  300: \tcase modes.Add:\n  301  \t\tif targetModeNow != targetModeAfter {\n  302  \t\t\tchannel.accountToUMode[change.Arg] = change.Mode\n  303  \t\t\tgo client.server.channelRegistry.StoreChannel(channel, IncludeLists)\n  304: \t\t\treturn []modes.ModeChange{change}, nil\n  305  \t\t}\n  306  \t\treturn nil, nil\n  307: \tcase modes.Remove:\n  308  \t\tif targetModeNow == change.Mode {\n  309  \t\t\tdelete(channel.accountToUMode, change.Arg)\n  310  \t\t\tgo client.server.channelRegistry.StoreChannel(channel, IncludeLists)\n  311: \t\t\treturn []modes.ModeChange{change}, nil\n  312  \t\t}\n  313  \t\treturn nil, nil\n  314: \tcase modes.List:\n  315: \t\tresult := make([]modes.ModeChange, len(channel.accountToUMode))\n  316  \t\tpos := 0\n  317  \t\tfor account, mode := range channel.accountToUMode {\n  318: \t\t\tresult[pos] = modes.ModeChange{\n  319  \t\t\t\tMode: mode,\n  320  \t\t\t\tArg:  account,\n  321: \t\t\t\tOp:   modes.Add,\n  322  \t\t\t}\n  323  \t\t\tpos++\n\n/home/kei/Development/oragono/irc/modes/modes.go:\n    4  // released under the MIT license\n    5  \n    6: package modes\n    7  \n    8  import (\n    .\n   14  \n   15  var (\n   16: \t// SupportedUserModes are the user modes that we actually support (modifying).\n   17: \tSupportedUserModes = Modes{\n   18  \t\tAway, Bot, Invisible, Operator, RegisteredOnly, ServerNotice, UserRoleplaying,\n   19  \t}\n   20  \n   21: \t// SupportedChannelModes are the channel modes that we support.\n   22: \tSupportedChannelModes = Modes{\n   23  \t\tBanMask, ChanRoleplaying, Auditorium, HighLight, LinkInfo, ExceptMask, InviteMask, InviteOnly, Key,\n   24  \t\tModerated, NoOutside, OpOnlyTopic, RegisteredOnly, Secret, UserLimit,\n   ..\n   26  )\n   27  \n   28: // ModeOp is an operation performed with modes\n   29  type ModeOp rune\n   30  \n   ..\n   36  \t// Add is used when adding the given key.\n   37  \tAdd ModeOp = '+'\n   38: \t// List is used when listing modes (for instance, listing the current bans on a channel).\n   39  \tList ModeOp = '='\n   40  \t// Remove is used when taking away the given key.\n   ..\n   95  }\n   96  \n   97: // Modes is just a raw list of modes\n   98: type Modes []Mode\n   99  \n  100: func (modes Modes) String() string {\n  101: \tstrs := make([]string, len(modes))\n  102: \tfor index, mode := range modes {\n  103  \t\tstrs[index] = mode.String()\n  104  \t}\n  ...\n  106  }\n  107  \n  108: // User Modes\n  109  const (\n  110  \tAway            Mode = 'a'\n  ...\n  121  )\n  122  \n  123: // Channel Modes\n  124  const (\n  125  \tBanMask         Mode = 'b' // arg\n  ...\n  147  \tVoice           Mode = 'v' // arg\n  148  \n  149: \t// ChannelPrivModes holds the list of modes that are privileged, ie founder/op/halfop, in order.\n  150  \t// voice is not in this list because it cannot perform channel operator actions.\n  151: \tChannelPrivModes = Modes{\n  152  \t\tChannelFounder, ChannelAdmin, ChannelOperator, Halfop,\n  153  \t}\n  154  \n  155: \t// ChannelUserModes holds the list of all modes that can be applied to a user in a channel,\n  156  \t// including Voice, in descending order of precedence\n  157: \tChannelUserModes = Modes{\n  158  \t\tChannelFounder, ChannelAdmin, ChannelOperator, Halfop, Voice,\n  159  \t}\n  ...\n  189  // GetLowestChannelModePrefix returns the lowest channel prefix mode out of the given prefixes.\n  190  func GetLowestChannelModePrefix(prefixes string) (lowest *Mode) {\n  191: \tfor i, mode := range ChannelUserModes {\n  192  \t\tif strings.Contains(prefixes, ChannelModePrefixes[mode]) {\n  193: \t\t\tlowest = &ChannelPrivModes[i]\n  194  \t\t}\n  195  \t}\n  ...\n  235  \n  236  \t\t\tvar isKnown bool\n  237: \t\t\tfor _, supportedMode := range SupportedUserModes {\n  238  \t\t\t\tif rune(supportedMode) == mode {\n  239  \t\t\t\t\tisKnown = true\n  ...\n  303  \n  304  \t\t\tvar isKnown bool\n  305: \t\t\tfor _, supportedMode := range SupportedChannelModes {\n  306  \t\t\t\tif rune(supportedMode) == mode {\n  307  \t\t\t\t\tisKnown = true\n  ...\n  309  \t\t\t\t}\n  310  \t\t\t}\n  311: \t\t\tfor _, supportedMode := range ChannelUserModes {\n  312  \t\t\t\tif rune(supportedMode) == mode {\n  313  \t\t\t\t\tisKnown = true\n  ...\n  327  }\n  328  \n  329: // ModeSet holds a set of modes.\n  330: type ModeSet [1]uint64\n  331  \n  332: // valid modes go from 65 ('A') to 122 ('z'), making at most 58 possible values;\n  333  // subtract 65 from the mode value and use that bit of the uint64 to represent it\n  334  const (\n  ...\n  336  )\n  337  \n  338: // returns a pointer to a new ModeSet\n  339: func NewModeSet() *ModeSet {\n  340: \tvar set ModeSet\n  341  \tutils.BitsetInitialize(set[:])\n  342  \treturn &set\n  ...\n  344  \n  345  // test whether `mode` is set\n  346: func (set *ModeSet) HasMode(mode Mode) bool {\n  347  \tif set == nil {\n  348  \t\treturn false\n  ...\n  353  \n  354  // set `mode` to be on or off, return whether the value actually changed\n  355: func (set *ModeSet) SetMode(mode Mode, on bool) (applied bool) {\n  356  \treturn utils.BitsetSet(set[:], uint(mode)-minMode, on)\n  357  }\n  358  \n  359: // return the modes in the set as a slice\n  360: func (set *ModeSet) AllModes() (result []Mode) {\n  361  \tif set == nil {\n  362  \t\treturn\n  ...\n  373  }\n  374  \n  375: // String returns the modes in this set.\n  376: func (set *ModeSet) String() (result string) {\n  377  \tif set == nil {\n  378  \t\treturn\n  ...\n  380  \n  381  \tvar buf strings.Builder\n  382: \tfor _, mode := range set.AllModes() {\n  383  \t\tbuf.WriteRune(rune(mode))\n  384  \t}\n  ...\n  386  }\n  387  \n  388: // Prefixes returns a list of prefixes for the given set of channel modes.\n  389: func (set *ModeSet) Prefixes(isMultiPrefix bool) (prefixes string) {\n  390  \tif set == nil {\n  391  \t\treturn\n  ...\n  393  \n  394  \t// add prefixes in order from highest to lowest privs\n  395: \tfor _, mode := range ChannelUserModes {\n  396  \t\tif set.HasMode(mode) {\n  397  \t\t\tprefixes += ChannelModePrefixes[mode]\n\n/home/kei/Development/oragono/irc/modes/modes_test.go:\n    2  // released under the MIT license\n    3  \n    4: package modes\n    5  \n    6  import (\n    .\n   10  \n   11  func TestParseChannelModeChanges(t *testing.T) {\n   12: \tmodes, unknown := ParseChannelModeChanges(\"+h\", \"wrmsr\")\n   13  \tif len(unknown) > 0 {\n   14  \t\tt.Errorf(\"unexpected unknown mode change: %v\", unknown)\n   ..\n   19  \t\tArg:  \"wrmsr\",\n   20  \t}\n   21: \tif len(modes) != 1 || modes[0] != expected {\n   22: \t\tt.Errorf(\"unexpected mode change: %v\", modes)\n   23  \t}\n   24  \n   25: \tmodes, unknown = ParseChannelModeChanges(\"-v\", \"shivaram\")\n   26  \tif len(unknown) > 0 {\n   27  \t\tt.Errorf(\"unexpected unknown mode change: %v\", unknown)\n   ..\n   32  \t\tArg:  \"shivaram\",\n   33  \t}\n   34: \tif len(modes) != 1 || modes[0] != expected {\n   35: \t\tt.Errorf(\"unexpected mode change: %v\", modes)\n   36  \t}\n   37  \n   38: \tmodes, unknown = ParseChannelModeChanges(\"+tx\")\n   39  \tif len(unknown) != 1 || !unknown['x'] {\n   40  \t\tt.Errorf(\"expected that x is an unknown mode, instead: %v\", unknown)\n   ..\n   45  \t\tArg:  \"\",\n   46  \t}\n   47: \tif len(modes) != 1 || modes[0] != expected {\n   48: \t\tt.Errorf(\"unexpected mode change: %v\", modes)\n   49  \t}\n   50  }\n   51  \n   52  func TestSetMode(t *testing.T) {\n   53: \tset := NewModeSet()\n   54  \n   55  \tif applied := set.SetMode(Invisible, false); applied != false {\n   56: \t\tt.Errorf(\"all modes should be false by default\")\n   57  \t}\n   58  \n   ..\n   69  \texpected1 := []Mode{Invisible, Operator}\n   70  \texpected2 := []Mode{Operator, Invisible}\n   71: \tif allModes := set.AllModes(); !(reflect.DeepEqual(allModes, expected1) || reflect.DeepEqual(allModes, expected2)) {\n   72: \t\tt.Errorf(\"unexpected AllModes value: %v\", allModes)\n   73  \t}\n   74  \n   75: \tif modeString := set.String(); !(modeString == \"io\" || modeString == \"oi\") {\n   76: \t\tt.Errorf(\"unexpected modestring: %s\", modeString)\n   77  \t}\n   78  }\n   79  \n   80  func TestNilReceivers(t *testing.T) {\n   81: \tset := NewModeSet()\n   82  \tset = nil\n   83  \n   84  \tif set.HasMode(Invisible) {\n   85: \t\tt.Errorf(\"nil ModeSet should not have any modes\")\n   86  \t}\n   87  \n   88  \tstr := set.String()\n   89  \tif str != \"\" {\n   90: \t\tt.Errorf(\"nil Modeset should have empty String(), got %v instead\", str)\n   91  \t}\n   92  }\n\n/home/kei/Development/oragono/irc/modes_test.go:\n    8  \t\"testing\"\n    9  \n   10: \t\"github.com/unendingPattern/oragono/irc/modes\"\n   11  )\n   12  \n   13: func TestParseDefaultChannelModes(t *testing.T) {\n   14  \tnt := \"+nt\"\n   15  \tn := \"+n\"\n   ..\n   19  \tvar parseTests = []struct {\n   20  \t\traw      *string\n   21: \t\texpected modes.Modes\n   22  \t}{\n   23: \t\t{&nt, modes.Modes{modes.NoOutside, modes.OpOnlyTopic}},\n   24: \t\t{&n, modes.Modes{modes.NoOutside}},\n   25: \t\t{&empty, modes.Modes{}},\n   26: \t\t{&tminusi, modes.Modes{modes.OpOnlyTopic}},\n   27: \t\t{nil, modes.Modes{modes.NoOutside, modes.OpOnlyTopic}},\n   28  \t}\n   29  \n   30  \tfor _, testcase := range parseTests {\n   31: \t\tresult := ParseDefaultChannelModes(testcase.raw)\n   32  \t\tif !reflect.DeepEqual(result, testcase.expected) {\n   33: \t\t\tt.Errorf(\"expected modes %s, got %s\", testcase.expected, result)\n   34  \t\t}\n   35  \t}\n   ..\n   37  \n   38  func TestUmodeGreaterThan(t *testing.T) {\n   39: \tif !umodeGreaterThan(modes.Halfop, modes.Voice) {\n   40  \t\tt.Errorf(\"expected Halfop > Voice\")\n   41  \t}\n   42  \n   43: \tif !umodeGreaterThan(modes.Voice, modes.Mode(0)) {\n   44: \t\tt.Errorf(\"expected Voice > 0 (the zero value of modes.Mode)\")\n   45  \t}\n   46  \n   47: \tif umodeGreaterThan(modes.ChannelAdmin, modes.ChannelAdmin) {\n   48: \t\tt.Errorf(\"modes should not be greater than themselves\")\n   49  \t}\n   50  }\n\n/home/kei/Development/oragono/irc/numerics.go:\n  150  \tERR_BADCHANNELKEY               = \"475\"\n  151  \tERR_BADCHANMASK                 = \"476\"\n  152: \tERR_NOCHANMODES                 = \"477\"\n  153  \tERR_BANLISTFULL                 = \"478\"\n  154  \tERR_NOPRIVILEGES                = \"481\"\n\n/home/kei/Development/oragono/irc/roleplay.go:\n    8  \n    9  \t\"github.com/unendingPattern/oragono/irc/caps\"\n   10: \t\"github.com/unendingPattern/oragono/irc/modes\"\n   11  )\n   12  \n   ..\n   36  \t\t}\n   37  \n   38: \t\tif !channel.flags.HasMode(modes.ChanRoleplaying) {\n   39  \t\t\trb.Add(nil, client.server.name, ERR_CANNOTSENDRP, channel.name, client.t(\"Channel doesn't have roleplaying mode available\"))\n   40  \t\t\treturn\n   ..\n   59  \t\t}\n   60  \n   61: \t\tif !user.HasMode(modes.UserRoleplaying) {\n   62  \t\t\trb.Add(nil, client.server.name, ERR_CANNOTSENDRP, user.nick, client.t(\"User doesn't have roleplaying mode enabled\"))\n   63  \t\t\treturn\n   ..\n   68  \t\t\trb.Add(nil, source, \"PRIVMSG\", user.nick, message)\n   69  \t\t}\n   70: \t\tif user.HasMode(modes.Away) {\n   71  \t\t\t//TODO(dan): possibly implement cooldown of away notifications to users\n   72  \t\t\trb.Add(nil, server.name, RPL_AWAY, user.nick, user.awayMessage)\n\n/home/kei/Development/oragono/irc/server.go:\n   29  \t\"github.com/unendingPattern/oragono/irc/languages\"\n   30  \t\"github.com/unendingPattern/oragono/irc/logger\"\n   31: \t\"github.com/unendingPattern/oragono/irc/modes\"\n   32  \t\"github.com/unendingPattern/oragono/irc/sno\"\n   33  \t\"github.com/unendingPattern/oragono/irc/utils\"\n   ..\n   42  \tcouldNotParseIPMsg, _ = (&[]ircmsg.IrcMessage{ircmsg.MakeMessage(nil, \"\", \"ERROR\", \"Unable to parse your IP address\")}[0]).Line()\n   43  \n   44: \t// supportedUserModesString acts as a cache for when we introduce users\n   45: \tsupportedUserModesString = modes.SupportedUserModes.String()\n   46: \t// supportedChannelModesString acts as a cache for when we introduce users\n   47: \tsupportedChannelModesString = modes.SupportedChannelModes.String()\n   48  \n   49  \t// SupportedCapabilities are the caps we advertise.\n   ..\n  160  \tisupport.Add(\"AWAYLEN\", strconv.Itoa(config.Limits.AwayLen))\n  161  \tisupport.Add(\"CASEMAPPING\", \"ascii\")\n  162: \tisupport.Add(\"CHANMODES\", strings.Join([]string{modes.Modes{modes.BanMask, modes.ExceptMask, modes.InviteMask}.String(), \"\", modes.Modes{modes.UserLimit, modes.Key, modes.HighLight}.String(), modes.Modes{modes.InviteOnly, modes.Moderated, modes.NoOutside, modes.OpOnlyTopic, modes.ChanRoleplaying, modes.Auditorium, modes.LinkInfo, modes.Secret}.String()}, \",\"))\n  163  \tisupport.Add(\"CHANNELLEN\", strconv.Itoa(config.Limits.ChannelLen))\n  164  \tisupport.Add(\"CHANTYPES\", \"#\")\n  ...\n  167  \tisupport.Add(\"INVEX\", \"\")\n  168  \tisupport.Add(\"KICKLEN\", strconv.Itoa(config.Limits.KickLen))\n  169: \tisupport.Add(\"MAXLIST\", fmt.Sprintf(\"beI:%s\", strconv.Itoa(config.Limits.ChanListModes)))\n  170  \tisupport.Add(\"MAXTARGETS\", maxTargetsString)\n  171: \tisupport.Add(\"MODES\", \"\")\n  172  \tisupport.Add(\"MONITOR\", strconv.Itoa(config.Limits.MonitorEntries))\n  173  \tisupport.Add(\"NETWORK\", config.Network.Name)\n  ...\n  203  }\n  204  \n  205: func loadChannelList(channel *Channel, list string, maskMode modes.Mode) {\n  206  \tif list == \"\" {\n  207  \t\treturn\n  ...\n  439  \tc.Send(nil, server.name, RPL_YOURHOST, c.nick, fmt.Sprintf(c.t(\"Your host is %[1]s, running version %[2]s\"), server.name, Ver))\n  440  \tc.Send(nil, server.name, RPL_CREATED, c.nick, fmt.Sprintf(c.t(\"This server was created %s\"), server.ctime.Format(time.RFC1123)))\n  441: \t//TODO(dan): Look at adding last optional [<channel modes with a parameter>] parameter\n  442: \tc.Send(nil, server.name, RPL_MYINFO, c.nick, server.name, Ver, supportedUserModesString, supportedChannelModesString)\n  443  \n  444  \trb = NewResponseBuffer(c)\n  ...\n  447  \trb.Send()\n  448  \n  449: \tmodestring := c.ModeString()\n  450: \tif modestring != \"+\" {\n  451: \t\tc.Send(nil, c.nickMaskString, RPL_UMODEIS, c.nick, c.ModeString())\n  452  \t}\n  453  \tif server.logger.IsLoggingRawIO() {\n  ...\n  473  \t\t\trb.Send()\n  474  \n  475: \t\t\t// construct and send fake modestring if necessary\n  476  \t\t\tc.stateMutex.RLock()\n  477: \t\t\tmyModes := channel.members[c]\n  478  \t\t\tc.stateMutex.RUnlock()\n  479: \t\t\tif myModes == nil {\n  480  \t\t\t\tcontinue\n  481  \t\t\t}\n  482: \t\t\toldModes := myModes.String()\n  483: \t\t\tif 0 < len(oldModes) {\n  484: \t\t\t\tparams := []string{channel.name, \"+\" + oldModes}\n  485: \t\t\t\tfor range oldModes {\n  486  \t\t\t\t\tparams = append(params, c.nick)\n  487  \t\t\t\t}\n  ...\n  611  \tfor _, channel := range target.Channels() {\n  612  \t\t// channel is secret and the target can't see it\n  613: \t\tif !client.HasMode(modes.Operator) {\n  614: \t\t\tif (target.HasMode(modes.Invisible) || channel.flags.HasMode(modes.Secret)) && !channel.hasClient(client) {\n  615  \t\t\t\tcontinue\n  616  \t\t\t}\n  ...\n  628  \ttnick := targetInfo.nickname\n  629  \n  630: \tif client.HasMode(modes.Operator) || client == target {\n  631  \t\twhoischannels := client.WhoisChannelsNames(target)\n  632  \t\tif whoischannels != nil {\n  ...\n  640  \t\trb.Add(nil, client.server.name, RPL_WHOISACTUALLY, cnick, tnick, fmt.Sprintf(\"%s@%s\", target.username, utils.LookupHostname(target.IPString())), target.IPString(), client.t(\"Actual user@host, Actual IP\"))\n  641  \t\t\n  642: \t\tif target.HasMode(modes.TLS) {\n  643  \t\t\trb.Add(nil, client.server.name, RPL_WHOISSECURE, cnick, tnick, client.t(\"is using a secure connection\"))\n  644  \t\t}\n  ...\n  647  \t\t\trb.Add(nil, client.server.name, RPL_WHOISACCOUNT, cnick, tnick, taccount, client.t(\"is logged in as\"))\n  648  \t\t}\n  649: \t\tif target.HasMode(modes.Bot) {\n  650  \t\t\trb.Add(nil, client.server.name, RPL_WHOISBOT, cnick, tnick, ircfmt.Unescape(fmt.Sprintf(client.t(\"is a $bBot$b on %s\"), client.server.Config().Network.Name)))\n  651  \t\t}\n  ...\n  660  \t\t// }\n  661  \n  662: \t\tif target.certfp != \"\" && (client.HasMode(modes.Operator) || client == target) {\n  663  \t\t\trb.Add(nil, client.server.name, RPL_WHOISCERTFP, cnick, tnick, fmt.Sprintf(client.t(\"has client certificate fingerprint %s\"), target.certfp))\n  664  \t\t}\n  ...\n  675  \tflags := \"\"\n  676  \n  677: \tif client.HasMode(modes.Away) {\n  678  \t\tflags = \"G\"\n  679  \t} else {\n  680  \t\tflags = \"H\"\n  681  \t}\n  682: \tif client.HasMode(modes.Operator) {\n  683  \t\tflags += \"*\"\n  684  \t}\n  ...\n  693  func whoChannel(client *Client, channel *Channel, friends ClientSet, rb *ResponseBuffer) {\n  694  \tfor _, member := range channel.Members() {\n  695: \t\tif !client.HasMode(modes.Invisible) || friends[client] {\n  696  \t\t\tclient.rplWhoReply(channel, member, rb)\n  697  \t\t}\n  ...\n 1121  \t// get the correct number of channel members\n 1122  \tvar memberCount int\n 1123: \tif target.HasMode(modes.Operator) || channel.hasClient(target) {\n 1124  \t\tmemberCount = len(channel.Members())\n 1125  \t} else {\n 1126  \t\tfor _, member := range channel.Members() {\n 1127: \t\t\tif !member.HasMode(modes.Invisible) {\n 1128  \t\t\t\tmemberCount++\n 1129  \t\t\t}\n\n/home/kei/Development/oragono/irc/types.go:\n    6  package irc\n    7  \n    8: import \"github.com/unendingPattern/oragono/irc/modes\"\n    9  \n   10  // ClientSet is a set of clients.\n   ..\n   26  }\n   27  \n   28: // MemberSet is a set of members with modes.\n   29: type MemberSet map[*Client]*modes.ModeSet\n   30  \n   31  // Add adds the given client to this set.\n   32  func (members MemberSet) Add(member *Client) {\n   33: \tmembers[member] = modes.NewModeSet()\n   34  }\n   35  \n   ..\n   46  \n   47  // AnyHasMode returns true if any of our clients has the given mode.\n   48: func (members MemberSet) AnyHasMode(mode modes.Mode) bool {\n   49: \tfor _, modes := range members {\n   50: \t\tif modes.HasMode(mode) {\n   51  \t\t\treturn true\n   52  \t\t}\n\n/home/kei/Development/oragono/irc/utils/bitset.go:\n    7  \n    8  // Library functions for lock-free bitsets, typically (constant-sized) arrays of uint64.\n    9: // For examples of use, see caps.Set and modes.ModeSet; the array has to be converted to a\n   10  // slice to use these functions.\n   11  \n\n624 matches across 20 files\n",
			"settings":
			{
				"buffer_size": 66221,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/home/kei/Cloud/Documents/utility",
			"settings":
			{
				"buffer_size": 324,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "utility"
			}
		},
		{
			"file": "irc/channelreg.go",
			"settings":
			{
				"buffer_size": 10263,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "irc/commands.go",
			"settings":
			{
				"buffer_size": 6331,
				"line_ending": "Unix"
			}
		},
		{
			"file": "irc/handlers.go",
			"settings":
			{
				"buffer_size": 81394,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "irc/fakelag_test.go",
			"settings":
			{
				"buffer_size": 2697,
				"line_ending": "Unix"
			}
		},
		{
			"file": "irc/roleplay.go",
			"settings":
			{
				"buffer_size": 2293,
				"line_ending": "Unix"
			}
		},
		{
			"file": "irc/server.go",
			"settings":
			{
				"buffer_size": 38208,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "irc/modes.go",
			"settings":
			{
				"buffer_size": 9715,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "irc/getters.go",
			"settings":
			{
				"buffer_size": 6787,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"About"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/kei/Development/oragono"
	],
	"file_history":
	[
		"/home/kei/Development/arch-configs/.config/conky.conf",
		"/home/kei/go/src/github.com/unendingPattern/goscraper/README.md",
		"/home/kei/dead.letter",
		"/home/kei/Cloud/Pictures/Resources/pleroma_theme.json",
		"/home/kei/Desktop/n1a52io.crt",
		"/home/kei/Development/oragono/irc/client.go",
		"/home/kei/go/src/github.com/unendingPattern/goscraper/goscraper.go",
		"/home/kei/go/src/github.com/unendingPattern/oragono/irc/handlers.go",
		"/home/kei/go/src/github.com/unendingPattern/oragono/irc/server.go",
		"/home/kei/Backups/unity-2018-08-13/websites/kei.a52.io/private-and-personal/index.html",
		"/home/kei/go/src/github.com/oragono/oragono/irc/server.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/services.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/snomanager.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/types.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/caps/set.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/strings.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/client_lookup_set.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/commands.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/config.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/database.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/gateways.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/getters.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/channel.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/channelreg.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/chanserv.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/client.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/modes/modes.go",
		"/home/kei/go/src/github.com/oragono/oragono/oragono.go",
		"/home/kei/go/src/github.com/oragono/oragono/README.md",
		"/home/kei/go/src/github.com/oragono/oragono/docs/MANUAL.md",
		"/home/kei/go/src/github.com/oragono/oragono/irc/accounts.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/batch.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/handlers.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/help.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/hostserv.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/idletimer.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/modes.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/modes_test.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/nickname.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/nickserv.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/responsebuffer.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/roleplay.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/channelmanager.go",
		"/home/kei/Development/oragono/oragono.motd",
		"/home/kei/go/src/github.com/oragono/oragono/irc/utils/net.go",
		"/home/kei/Development/oragono/irc/accounts.go",
		"/home/kei/go/src/github.com/oragono/oragono/irc/whowas.go",
		"/home/kei/Development/oragono/irc/getters.go",
		"/home/kei/Development/oragono/irc/strings.go",
		"/home/kei/Development/oragono/irc/handlers.go",
		"/home/kei/Development/oragono/vendor/github.com/aquilax/tripcode/tripcode.go",
		"/home/kei/Development/oragono/irc/server.go",
		"/home/kei/Development/oragono/oragono.go",
		"/home/kei/Development/oragono/irc/channel.go",
		"/home/kei/Development/oragono/DEVELOPING.md",
		"/home/kei/Development/oragono/irc/commands.go",
		"/home/kei/Development/oragono/vendor/github.com/oragono/go-ident/client.go",
		"/home/kei/Development/oragono/vendor/github.com/goshuirc/irc-go/ircmap/istring.go",
		"/home/kei/Development/oragono/vendor/github.com/goshuirc/irc-go/ircmap/istring_test.go",
		"/home/kei/Development/oragono/vendor/github.com/goshuirc/irc-go/ircmap/doc.go",
		"/home/kei/Development/oragono/vendor/github.com/aquilax/tripcode/.travis.yml",
		"/home/kei/Development/oragono/irc/modes/modes.go",
		"/home/kei/Development/oragono/irc/modes/modes_test.go",
		"/home/kei/Development/oragono/languages/example.lang.yaml",
		"/home/kei/Development/oragono/irc/whowas_test.go",
		"/home/kei/Development/oragono/languages/example-nickserv.lang.json",
		"/home/kei/Development/oragono/languages/README.md",
		"/home/kei/Development/oragono/languages/example-irc.lang.json",
		"/home/kei/ircideas",
		"/home/kei/Development/oragono/languages/nb-NO.lang.yaml",
		"/home/kei/Development/oragono/languages/nb-NO-help.lang.json",
		"/home/kei/Development/oragono/.goreleaser.yml",
		"/home/kei/Desktop/ddddd",
		"/home/kei/Documents/faggqt.pw.old/templates/layout.html2",
		"/home/kei/Documents/faggqt.pw.old/templates/random-info.html",
		"/run/user/1000/gvfs/sftp:host=10.8.0.3,user=kei/home/kei/.weechat/python/file_download.py",
		"/run/media/kei/b488206b-4ffb-4aee-b40f-a91b019c8a9a/etc/hosts",
		"/home/kei/Development/weechat-scripts/file_download.py",
		"/home/kei/Cloud/oVPN/keiphone.ovpn",
		"/home/kei/Zomboid/Server/servertest.ini",
		"/home/kei/Documents/zomboidserver.txt",
		"/home/kei/.local/share/Steam/steamapps/workshop/content/294100/735106432/Defs/ThingDefs/EdBPrepareCarefully.xml",
		"/media/veracrypt1/Backups/W520 Backup/Scripts/nvidiaswitch.sh",
		"/media/veracrypt1/Backups/W520 Backup/Scripts/checklock2.sh",
		"/run/user/1000/gvfs/sftp:host=10.0.0.50,user=root/home/websites/kei.a52.io/index.html",
		"/media/veracrypt1/Backups/W520 Backup/.scripts/seaf.sh",
		"/media/veracrypt1/Backups/W520 Backup/.scripts/stats.sh",
		"/media/veracrypt1/Backups/W520 Backup/.scripts/memusage",
		"/run/user/1000/gvfs/sftp:host=10.0.0.50,user=root/home/websites/kei.a52.io/pics/index.html",
		"/home/kei/Desktop/weechatconfig.md",
		"/run/user/1000/gvfs/sftp:host=192.168.1.205,user=kei/home/kei/.weechat/logs/irc.im.[di]eiritana.weechatlog",
		"/tmp/mozilla_kei0/testies.txt",
		"/tmp/mozilla_kei0/testies.sig",
		"/home/kei/Desktop/ccf4c733929efd9762ab02cd65175377.svg",
		"/media/veracrypt1/Backups/W520 Backup/Development/adrienne-barbeaubot/sopel/modules/gimmicks.py",
		"/media/veracrypt1/Backups/W520 Backup/Development/adrienne-barbeaubot/sopel/modules/ping.py",
		"/run/user/1000/gvfs/sftp:host=10.0.0.50,user=root/home/websites/txt.a52.io/cfg/conf.php",
		"/run/user/1000/gvfs/sftp:host=10.0.0.50,user=root/home/websites/txt.a52.io/css/bootstrap/darkstrap-0.9.3.css",
		"/run/user/1000/gvfs/sftp:host=10.0.0.50,user=root/home/websites/txt.a52.io/robots.txt",
		"/run/user/1000/gvfs/sftp:host=10.0.0.50,user=root/home/websites/kei.a52.io/robots.txt",
		"/home/kei/Downloads/209c80cd995184acd490b51b5f1dba67.jpg",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/txt/unbans.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/txt/system32.lua.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/txt/ss13 hwid tests.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/txt/spamtastic.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/txt/seizure.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/txt/sajoinshitfest.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/txt/opers.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/txt/jerkcity.caps.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/txt/bottest.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/txt/banwords.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/lulz/you.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/lulz/d2k5 default ai laws.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/lulz/r5.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/lulz/spacepunch.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/lulz/ss13 gyrogun gets raped.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/lulz/the grifed.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/dev/dnsbl.phps",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/lulz/goonstation.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/lulz/why.txt",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/dev/germanizer.phps",
		"/run/user/1000/gvfs/sftp:host=10.0.0.50,user=root/home/websites/a52.io/index.html",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/dev/xf_irc_nsa_track.phps",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/dev/xf_spamfinder.phps",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/dev/irc_info.phps",
		"/media/veracrypt1/Backups/Manjaro/keira/Development/faggqtold/files/dev/xf_usermap.phps",
		"/run/user/1000/gvfs/sftp:host=10.0.0.50,user=root/home/websites/txt.a52.io/tpl/bootstrap-compact.php",
		"/run/user/1000/gvfs/sftp:host=10.0.0.50,user=root/home/websites/txt.a52.io/tpl/bootstrap.php"
	],
	"find":
	{
		"height": 22.0
	},
	"find_in_files":
	{
		"height": 102.0,
		"where_history":
		[
			"/home/kei/Development/oragono/irc",
			"<open folders>,<open files>",
			"<open folders>",
			"/media/veracrypt1/Backups/W520 Backup/Development/",
			"/media/veracrypt1/Backups/W520 Backup/Development",
			"/media/veracrypt1/Backups/W520 Backup/Development/adrienne-barbeaubot/sopel/modules",
			"<open files>",
			"<current file>",
			"/home/kei/.purple/logs/discord/keira%2bdiscord@hardcats.net/*/*.txt",
			"/home/kei/.purple/logs/discord/keira%2bdiscord@hardcats.net/*.txt",
			"/home/kei/.purple/logs/discord/keira%2bdiscord@hardcats.net/*",
			"<open files>",
			"*.txt",
			"<open files>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"modes",
			"HighLight",
			"useragent",
			"goscraper",
			"time",
			"req",
			"client.",
			"goreq",
			"httpclient",
			"timeOut",
			"MaxRedirect",
			"defaultclient",
			"goscraper",
			"goroutine",
			"goroutines",
			"goroutine",
			"nameslines",
			"// names",
			"// NAMES",
			"auditorium",
			"// names",
			"userlimit",
			"showUserLimit",
			"showkey",
			"modes.key",
			"tripcode",
			"Key",
			"key",
			"Auditorium",
			"highlight",
			"key",
			"Key",
			"Kei",
			"strings",
			"privmsg",
			"Banlist",
			"password",
			"key",
			"kei",
			"keyChannelPassword",
			"Key",
			"setKey",
			"Key",
			"modes",
			"Auditorium",
			"// list",
			"names",
			"privmsg",
			"reflect",
			"Server.name",
			"server.name",
			"config.Server.nameCasefolded",
			"sendRoleplayMessage",
			"ircmsg",
			"sceneHandler",
			"sceneNickMask",
			"npcNickMask",
			"fakesource",
			"sendRoleplayMessage",
			"source",
			"channel",
			"privmsg",
			"fmt.Printf(",
			"privmsg",
			"net/html",
			"html",
			"privmsg",
			"channel",
			"message",
			"sendMessage",
			"server",
			"urlDisplay",
			"Auditorium",
			"auditorium",
			"Auditorium",
			"oragono/oragono",
			"Auditorium",
			"auditorium",
			"urldisplay",
			"Auditorium",
			"regexp",
			"trip",
			"message",
			"Auditorium",
			"tripcode",
			"github.com/oragono/oragono/",
			"Auditorium",
			"modes.Auditorium",
			"Malformed username",
			"kei-znc",
			"updateNickMask",
			"Casefold",
			"range",
			"nickmask",
			"case",
			"err",
			"newcfnick",
			"CasefoldName",
			"casefoldname",
			"performNickChange",
			"sanick",
			"origNickMask",
			"performNickChange",
			"rb = NewResponseBuffer(c)",
			"tripcode",
			"couldn't be casefolded",
			"casefolded",
			"nickmask",
			"performNickChange",
			"rb",
			"target",
			"sanickHandler",
			"nickHandler",
			"performNickChange",
			"err",
			"client.",
			"whowas",
			"Erroneous",
			"nick",
			"c.",
			"tripcode",
			"range",
			"member.send",
			"audit",
			"ChanRoleplaying",
			"Auditorium",
			"UserRoleplaying",
			"mode"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"client.server.logger.Debug(\"localconnect-ip\", fmt.Sprintf(",
			"LinkInfo",
			"github.com/unendingPattern/oragono/",
			"ircd",
			"newNick",
			"c.",
			"client.",
			".",
			"_dl",
			"t",
			"1426403121.jpg",
			"5123744621.jpg",
			"kei   ",
			"-----",
			"***",
			"A41111",
			"#A41515",
			"darkred",
			"WindowBorders",
			"../fonts",
			"sdd",
			"webserver",
			"../fonts/",
			"../",
			"ProFontWeb",
			"ProFont",
			"/static/fonts/",
			"static/fonts/",
			"",
			"\t\t",
			"10",
			"14",
			"10",
			"15",
			"254",
			"yellow",
			"FREENODE",
			"url_regex",
			"userBalance",
			"userbalance",
			"stock",
			"",
			"<br/>",
			"Kei - Today",
			"------ - Today",
			"------",
			"H4k - Today",
			"Kei - Today",
			"Kei ",
			"512981",
			"000000",
			"ffffff",
			"",
			"1422784318.jpg",
			"1526714224",
			"1322167773",
			"1124460531",
			"1525705329",
			"152",
			"-R",
			"/tr><br/>",
			" <a href=\"https://pastebin.com/raw/",
			" <a href=\"/raw/",
			"copy /Y FILE",
			"/Y",
			"copy /F ",
			"copy FILE",
			"copy *",
			"dddddd",
			"\"",
			"/opt/",
			"10.0.0.50",
			"a52.io",
			"\\n",
			"IMG_20170620_151320.jpg",
			"IMG_20180614_145421.jpg",
			"my.servers.ip",
			"185.22.173.126",
			"10.0.0.50",
			"",
			"h2",
			"Vitamin",
			"",
			"@kei-qt.io",
			"",
			"kei-qt.io",
			"h2",
			"textarea",
			"scripts & guides",
			" src=\"/ss13/",
			"<a href=\"/ss13/",
			"hardcats.net",
			"img-thumb large",
			"img-thumb-large",
			"img class=\"img-thumb\" src=",
			"",
			"smartness",
			"<hr/>",
			"shop/marketplace system",
			"",
			"gm_wireconstruct_rc",
			"",
			"'/static/",
			"/static/",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "irc/modes/modes.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9065,
						"regions":
						{
						},
						"selection":
						[
							[
								6709,
								6709
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3120.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "irc/channel.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26230,
						"regions":
						{
						},
						"selection":
						[
							[
								8838,
								8838
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3599.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "irc/socket.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5815,
						"regions":
						{
						},
						"selection":
						[
							[
								562,
								562
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 66221,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										224,
										229
									],
									[
										366,
										371
									],
									[
										372,
										377
									],
									[
										410,
										415
									],
									[
										612,
										617
									],
									[
										769,
										774
									],
									[
										778,
										783
									],
									[
										809,
										814
									],
									[
										844,
										849
									],
									[
										890,
										895
									],
									[
										936,
										941
									],
									[
										1142,
										1147
									],
									[
										1281,
										1286
									],
									[
										1431,
										1436
									],
									[
										1562,
										1567
									],
									[
										1670,
										1675
									],
									[
										1781,
										1786
									],
									[
										1934,
										1939
									],
									[
										1993,
										1998
									],
									[
										2018,
										2023
									],
									[
										2129,
										2134
									],
									[
										2256,
										2261
									],
									[
										2392,
										2397
									],
									[
										2534,
										2539
									],
									[
										2789,
										2794
									],
									[
										2966,
										2971
									],
									[
										3057,
										3062
									],
									[
										3140,
										3145
									],
									[
										3204,
										3209
									],
									[
										3539,
										3544
									],
									[
										3607,
										3612
									],
									[
										3702,
										3707
									],
									[
										3786,
										3791
									],
									[
										3803,
										3808
									],
									[
										3829,
										3834
									],
									[
										3976,
										3981
									],
									[
										4092,
										4097
									],
									[
										4212,
										4217
									],
									[
										4259,
										4264
									],
									[
										4345,
										4350
									],
									[
										4362,
										4367
									],
									[
										4388,
										4393
									],
									[
										4500,
										4505
									],
									[
										4528,
										4533
									],
									[
										4542,
										4547
									],
									[
										4643,
										4648
									],
									[
										4768,
										4773
									],
									[
										4851,
										4856
									],
									[
										5088,
										5093
									],
									[
										5161,
										5166
									],
									[
										5234,
										5239
									],
									[
										5336,
										5341
									],
									[
										5433,
										5438
									],
									[
										5665,
										5670
									],
									[
										5763,
										5768
									],
									[
										6141,
										6146
									],
									[
										6362,
										6367
									],
									[
										6558,
										6563
									],
									[
										6610,
										6615
									],
									[
										6780,
										6785
									],
									[
										7041,
										7046
									],
									[
										7185,
										7190
									],
									[
										7343,
										7348
									],
									[
										7469,
										7474
									],
									[
										7815,
										7820
									],
									[
										8043,
										8048
									],
									[
										8098,
										8103
									],
									[
										8354,
										8359
									],
									[
										8452,
										8457
									],
									[
										8505,
										8510
									],
									[
										8585,
										8590
									],
									[
										8830,
										8835
									],
									[
										9245,
										9250
									],
									[
										9573,
										9578
									],
									[
										9809,
										9814
									],
									[
										10185,
										10190
									],
									[
										10495,
										10500
									],
									[
										10829,
										10834
									],
									[
										10999,
										11004
									],
									[
										11014,
										11019
									],
									[
										11070,
										11075
									],
									[
										11257,
										11262
									],
									[
										11332,
										11337
									],
									[
										11360,
										11365
									],
									[
										11393,
										11398
									],
									[
										11593,
										11598
									],
									[
										11657,
										11662
									],
									[
										11723,
										11728
									],
									[
										11837,
										11842
									],
									[
										11960,
										11965
									],
									[
										12146,
										12151
									],
									[
										12161,
										12166
									],
									[
										12318,
										12323
									],
									[
										12480,
										12485
									],
									[
										12682,
										12687
									],
									[
										12760,
										12765
									],
									[
										12967,
										12972
									],
									[
										13198,
										13203
									],
									[
										13490,
										13495
									],
									[
										13861,
										13866
									],
									[
										13916,
										13921
									],
									[
										14272,
										14277
									],
									[
										14391,
										14396
									],
									[
										14656,
										14661
									],
									[
										14980,
										14985
									],
									[
										15221,
										15226
									],
									[
										15408,
										15413
									],
									[
										15434,
										15439
									],
									[
										15601,
										15606
									],
									[
										15735,
										15740
									],
									[
										15882,
										15887
									],
									[
										15911,
										15916
									],
									[
										15925,
										15930
									],
									[
										15933,
										15938
									],
									[
										16158,
										16163
									],
									[
										16213,
										16218
									],
									[
										16479,
										16484
									],
									[
										16525,
										16530
									],
									[
										16816,
										16821
									],
									[
										16908,
										16913
									],
									[
										16928,
										16933
									],
									[
										16944,
										16949
									],
									[
										16987,
										16992
									],
									[
										17010,
										17015
									],
									[
										17025,
										17030
									],
									[
										17210,
										17215
									],
									[
										17267,
										17272
									],
									[
										17431,
										17436
									],
									[
										17447,
										17452
									],
									[
										17586,
										17591
									],
									[
										17691,
										17696
									],
									[
										17737,
										17742
									],
									[
										17787,
										17792
									],
									[
										17805,
										17810
									],
									[
										17884,
										17889
									],
									[
										17917,
										17922
									],
									[
										18146,
										18151
									],
									[
										18288,
										18293
									],
									[
										18473,
										18478
									],
									[
										18720,
										18725
									],
									[
										19053,
										19058
									],
									[
										19332,
										19337
									],
									[
										19412,
										19417
									],
									[
										19612,
										19617
									],
									[
										19633,
										19638
									],
									[
										19758,
										19763
									],
									[
										19814,
										19819
									],
									[
										19985,
										19990
									],
									[
										20149,
										20154
									],
									[
										20318,
										20323
									],
									[
										20362,
										20367
									],
									[
										20428,
										20433
									],
									[
										20499,
										20504
									],
									[
										20522,
										20527
									],
									[
										20622,
										20627
									],
									[
										20660,
										20665
									],
									[
										20713,
										20718
									],
									[
										20864,
										20869
									],
									[
										20875,
										20880
									],
									[
										20913,
										20918
									],
									[
										21097,
										21102
									],
									[
										21170,
										21175
									],
									[
										21268,
										21273
									],
									[
										21476,
										21481
									],
									[
										21767,
										21772
									],
									[
										21998,
										22003
									],
									[
										22020,
										22025
									],
									[
										22228,
										22233
									],
									[
										22572,
										22577
									],
									[
										22789,
										22794
									],
									[
										22795,
										22800
									],
									[
										22970,
										22975
									],
									[
										22979,
										22984
									],
									[
										23139,
										23144
									],
									[
										23289,
										23294
									],
									[
										23319,
										23324
									],
									[
										23623,
										23628
									],
									[
										23742,
										23747
									],
									[
										23872,
										23877
									],
									[
										23908,
										23913
									],
									[
										23920,
										23925
									],
									[
										23989,
										23994
									],
									[
										24049,
										24054
									],
									[
										24079,
										24084
									],
									[
										24196,
										24201
									],
									[
										24244,
										24249
									],
									[
										24358,
										24363
									],
									[
										24439,
										24444
									],
									[
										24609,
										24614
									],
									[
										24716,
										24721
									],
									[
										24750,
										24755
									],
									[
										24990,
										24995
									],
									[
										25091,
										25096
									],
									[
										25470,
										25475
									],
									[
										25672,
										25677
									],
									[
										25810,
										25815
									],
									[
										25848,
										25853
									],
									[
										26023,
										26028
									],
									[
										26052,
										26057
									],
									[
										26076,
										26081
									],
									[
										26082,
										26087
									],
									[
										26088,
										26093
									],
									[
										26216,
										26221
									],
									[
										26228,
										26233
									],
									[
										26331,
										26336
									],
									[
										26367,
										26372
									],
									[
										26414,
										26419
									],
									[
										26455,
										26460
									],
									[
										26589,
										26594
									],
									[
										26647,
										26652
									],
									[
										26803,
										26808
									],
									[
										26840,
										26845
									],
									[
										26867,
										26872
									],
									[
										26896,
										26901
									],
									[
										27072,
										27077
									],
									[
										27333,
										27338
									],
									[
										27584,
										27589
									],
									[
										27617,
										27622
									],
									[
										27769,
										27774
									],
									[
										27790,
										27795
									],
									[
										27822,
										27827
									],
									[
										27836,
										27841
									],
									[
										27877,
										27882
									],
									[
										27921,
										27926
									],
									[
										27938,
										27943
									],
									[
										27993,
										27998
									],
									[
										28020,
										28025
									],
									[
										28105,
										28110
									],
									[
										28129,
										28134
									],
									[
										28286,
										28291
									],
									[
										28437,
										28442
									],
									[
										28650,
										28655
									],
									[
										28740,
										28745
									],
									[
										28748,
										28753
									],
									[
										28754,
										28759
									],
									[
										28809,
										28814
									],
									[
										28897,
										28902
									],
									[
										29059,
										29064
									],
									[
										29349,
										29354
									],
									[
										29511,
										29516
									],
									[
										29588,
										29593
									],
									[
										29635,
										29640
									],
									[
										29784,
										29789
									],
									[
										30025,
										30030
									],
									[
										30043,
										30048
									],
									[
										30076,
										30081
									],
									[
										30208,
										30213
									],
									[
										30469,
										30474
									],
									[
										30699,
										30704
									],
									[
										30859,
										30864
									],
									[
										31114,
										31119
									],
									[
										31318,
										31323
									],
									[
										31562,
										31567
									],
									[
										31833,
										31838
									],
									[
										31999,
										32004
									],
									[
										32200,
										32205
									],
									[
										32233,
										32238
									],
									[
										32265,
										32270
									],
									[
										32300,
										32305
									],
									[
										32472,
										32477
									],
									[
										32759,
										32764
									],
									[
										33108,
										33113
									],
									[
										33240,
										33245
									],
									[
										33368,
										33373
									],
									[
										33534,
										33539
									],
									[
										33816,
										33821
									],
									[
										33857,
										33862
									],
									[
										33896,
										33901
									],
									[
										34130,
										34135
									],
									[
										34330,
										34335
									],
									[
										34485,
										34490
									],
									[
										34561,
										34566
									],
									[
										34845,
										34850
									],
									[
										35183,
										35188
									],
									[
										35373,
										35378
									],
									[
										35380,
										35385
									],
									[
										35464,
										35469
									],
									[
										35491,
										35496
									],
									[
										35526,
										35531
									],
									[
										35559,
										35564
									],
									[
										35590,
										35595
									],
									[
										35646,
										35651
									],
									[
										35796,
										35801
									],
									[
										35872,
										35877
									],
									[
										36101,
										36106
									],
									[
										36425,
										36430
									],
									[
										36740,
										36745
									],
									[
										37018,
										37023
									],
									[
										37174,
										37179
									],
									[
										37250,
										37255
									],
									[
										37464,
										37469
									],
									[
										37712,
										37717
									],
									[
										37791,
										37796
									],
									[
										38019,
										38024
									],
									[
										38175,
										38180
									],
									[
										38404,
										38409
									],
									[
										38467,
										38472
									],
									[
										38686,
										38691
									],
									[
										38746,
										38751
									],
									[
										38915,
										38920
									],
									[
										38982,
										38987
									],
									[
										39086,
										39091
									],
									[
										39209,
										39214
									],
									[
										39285,
										39290
									],
									[
										39493,
										39498
									],
									[
										39527,
										39532
									],
									[
										39672,
										39677
									],
									[
										39827,
										39832
									],
									[
										39947,
										39952
									],
									[
										39994,
										39999
									],
									[
										40096,
										40101
									],
									[
										40342,
										40347
									],
									[
										40457,
										40462
									],
									[
										40597,
										40602
									],
									[
										40630,
										40635
									],
									[
										40638,
										40643
									],
									[
										40644,
										40649
									],
									[
										40660,
										40665
									],
									[
										40677,
										40682
									],
									[
										40871,
										40876
									],
									[
										40902,
										40907
									],
									[
										40946,
										40951
									],
									[
										41061,
										41066
									],
									[
										41072,
										41077
									],
									[
										41089,
										41094
									],
									[
										41104,
										41109
									],
									[
										41127,
										41132
									],
									[
										41143,
										41148
									],
									[
										41164,
										41169
									],
									[
										41230,
										41235
									],
									[
										41281,
										41286
									],
									[
										41314,
										41319
									],
									[
										41459,
										41464
									],
									[
										41566,
										41571
									],
									[
										41599,
										41604
									],
									[
										41729,
										41734
									],
									[
										41824,
										41829
									],
									[
										41932,
										41937
									],
									[
										41965,
										41970
									],
									[
										42094,
										42099
									],
									[
										42143,
										42148
									],
									[
										42250,
										42255
									],
									[
										42276,
										42281
									],
									[
										42440,
										42445
									],
									[
										42591,
										42596
									],
									[
										42767,
										42772
									],
									[
										42793,
										42798
									],
									[
										42850,
										42855
									],
									[
										42859,
										42864
									],
									[
										42874,
										42879
									],
									[
										42880,
										42885
									],
									[
										42902,
										42907
									],
									[
										43016,
										43021
									],
									[
										43080,
										43085
									],
									[
										43113,
										43118
									],
									[
										43187,
										43192
									],
									[
										43201,
										43206
									],
									[
										43207,
										43212
									],
									[
										43295,
										43300
									],
									[
										43331,
										43336
									],
									[
										43360,
										43365
									],
									[
										43434,
										43439
									],
									[
										43622,
										43627
									],
									[
										43661,
										43666
									],
									[
										43786,
										43791
									],
									[
										43881,
										43886
									],
									[
										43943,
										43948
									],
									[
										43998,
										44003
									],
									[
										44082,
										44087
									],
									[
										44207,
										44212
									],
									[
										44229,
										44234
									],
									[
										44249,
										44254
									],
									[
										44272,
										44277
									],
									[
										44286,
										44291
									],
									[
										44326,
										44331
									],
									[
										44376,
										44381
									],
									[
										44592,
										44597
									],
									[
										44692,
										44697
									],
									[
										44965,
										44970
									],
									[
										45111,
										45116
									],
									[
										45201,
										45206
									],
									[
										45303,
										45308
									],
									[
										45318,
										45323
									],
									[
										45336,
										45341
									],
									[
										45501,
										45506
									],
									[
										45596,
										45601
									],
									[
										45873,
										45878
									],
									[
										46017,
										46022
									],
									[
										46078,
										46083
									],
									[
										46219,
										46224
									],
									[
										46347,
										46352
									],
									[
										46408,
										46413
									],
									[
										46487,
										46492
									],
									[
										46616,
										46621
									],
									[
										46671,
										46676
									],
									[
										46743,
										46748
									],
									[
										46865,
										46870
									],
									[
										46883,
										46888
									],
									[
										46900,
										46905
									],
									[
										46917,
										46922
									],
									[
										46936,
										46941
									],
									[
										46958,
										46963
									],
									[
										46972,
										46977
									],
									[
										46995,
										47000
									],
									[
										47013,
										47018
									],
									[
										47055,
										47060
									],
									[
										47169,
										47174
									],
									[
										47261,
										47266
									],
									[
										47283,
										47288
									],
									[
										47303,
										47308
									],
									[
										47326,
										47331
									],
									[
										47340,
										47345
									],
									[
										47379,
										47384
									],
									[
										47557,
										47562
									],
									[
										47571,
										47576
									],
									[
										47619,
										47624
									],
									[
										47636,
										47641
									],
									[
										47828,
										47833
									],
									[
										47917,
										47922
									],
									[
										47946,
										47951
									],
									[
										48008,
										48013
									],
									[
										48022,
										48027
									],
									[
										48058,
										48063
									],
									[
										48278,
										48283
									],
									[
										48313,
										48318
									],
									[
										48573,
										48578
									],
									[
										48612,
										48617
									],
									[
										48696,
										48701
									],
									[
										48889,
										48894
									],
									[
										49104,
										49109
									],
									[
										49183,
										49188
									],
									[
										49391,
										49396
									],
									[
										49470,
										49475
									],
									[
										49508,
										49513
									],
									[
										49658,
										49663
									],
									[
										49742,
										49747
									],
									[
										49896,
										49901
									],
									[
										49977,
										49982
									],
									[
										49996,
										50001
									],
									[
										50061,
										50066
									],
									[
										50069,
										50074
									],
									[
										50209,
										50214
									],
									[
										50231,
										50236
									],
									[
										50278,
										50283
									],
									[
										50286,
										50291
									],
									[
										50552,
										50557
									],
									[
										50708,
										50713
									],
									[
										50886,
										50891
									],
									[
										50914,
										50919
									],
									[
										50932,
										50937
									],
									[
										50966,
										50971
									],
									[
										50972,
										50977
									],
									[
										51032,
										51037
									],
									[
										51073,
										51078
									],
									[
										51166,
										51171
									],
									[
										51263,
										51268
									],
									[
										51404,
										51409
									],
									[
										51428,
										51433
									],
									[
										51595,
										51600
									],
									[
										51603,
										51608
									],
									[
										51714,
										51719
									],
									[
										51742,
										51747
									],
									[
										51873,
										51878
									],
									[
										51881,
										51886
									],
									[
										52191,
										52196
									],
									[
										52298,
										52303
									],
									[
										52422,
										52427
									],
									[
										52598,
										52603
									],
									[
										52759,
										52764
									],
									[
										52871,
										52876
									],
									[
										52894,
										52899
									],
									[
										52913,
										52918
									],
									[
										52955,
										52960
									],
									[
										53191,
										53196
									],
									[
										53214,
										53219
									],
									[
										53225,
										53230
									],
									[
										53251,
										53256
									],
									[
										53387,
										53392
									],
									[
										53580,
										53585
									],
									[
										53735,
										53740
									],
									[
										53781,
										53786
									],
									[
										53793,
										53798
									],
									[
										53911,
										53916
									],
									[
										53948,
										53953
									],
									[
										54106,
										54111
									],
									[
										54259,
										54264
									],
									[
										54284,
										54289
									],
									[
										54498,
										54503
									],
									[
										54706,
										54711
									],
									[
										54814,
										54819
									],
									[
										55021,
										55026
									],
									[
										55036,
										55041
									],
									[
										55107,
										55112
									],
									[
										55140,
										55145
									],
									[
										55352,
										55357
									],
									[
										55367,
										55372
									],
									[
										55438,
										55443
									],
									[
										55471,
										55476
									],
									[
										55695,
										55700
									],
									[
										55710,
										55715
									],
									[
										55781,
										55786
									],
									[
										55873,
										55878
									],
									[
										55986,
										55991
									],
									[
										56157,
										56162
									],
									[
										56173,
										56178
									],
									[
										56205,
										56210
									],
									[
										56247,
										56252
									],
									[
										56301,
										56306
									],
									[
										56322,
										56327
									],
									[
										56358,
										56363
									],
									[
										56388,
										56393
									],
									[
										56410,
										56415
									],
									[
										56462,
										56467
									],
									[
										56479,
										56484
									],
									[
										56581,
										56586
									],
									[
										56676,
										56681
									],
									[
										56704,
										56709
									],
									[
										56804,
										56809
									],
									[
										57005,
										57010
									],
									[
										57064,
										57069
									],
									[
										57210,
										57215
									],
									[
										57216,
										57221
									],
									[
										57248,
										57253
									],
									[
										57254,
										57259
									],
									[
										57260,
										57265
									],
									[
										57277,
										57282
									],
									[
										57312,
										57317
									],
									[
										57318,
										57323
									],
									[
										57324,
										57329
									],
									[
										57361,
										57366
									],
									[
										57367,
										57372
									],
									[
										57397,
										57402
									],
									[
										57403,
										57408
									],
									[
										57409,
										57414
									],
									[
										57445,
										57450
									],
									[
										57451,
										57456
									],
									[
										57457,
										57462
									],
									[
										57474,
										57479
									],
									[
										57597,
										57602
									],
									[
										57706,
										57711
									],
									[
										57865,
										57870
									],
									[
										57879,
										57884
									],
									[
										57986,
										57991
									],
									[
										57999,
										58004
									],
									[
										58073,
										58078
									],
									[
										58133,
										58138
									],
									[
										58153,
										58158
									],
									[
										58194,
										58199
									],
									[
										58421,
										58426
									],
									[
										58705,
										58710
									],
									[
										58789,
										58794
									],
									[
										59017,
										59022
									],
									[
										59289,
										59294
									],
									[
										59668,
										59673
									],
									[
										59959,
										59964
									],
									[
										60036,
										60041
									],
									[
										60050,
										60055
									],
									[
										60069,
										60074
									],
									[
										60111,
										60116
									],
									[
										60191,
										60196
									],
									[
										60205,
										60210
									],
									[
										60227,
										60232
									],
									[
										60456,
										60461
									],
									[
										60486,
										60491
									],
									[
										60492,
										60497
									],
									[
										60498,
										60503
									],
									[
										60513,
										60518
									],
									[
										60531,
										60536
									],
									[
										60563,
										60568
									],
									[
										60569,
										60574
									],
									[
										60575,
										60580
									],
									[
										60592,
										60597
									],
									[
										60603,
										60608
									],
									[
										60630,
										60635
									],
									[
										60636,
										60641
									],
									[
										60642,
										60647
									],
									[
										60660,
										60665
									],
									[
										60677,
										60682
									],
									[
										60694,
										60699
									],
									[
										60713,
										60718
									],
									[
										60736,
										60741
									],
									[
										60754,
										60759
									],
									[
										60770,
										60775
									],
									[
										61113,
										61118
									],
									[
										61197,
										61202
									],
									[
										61429,
										61434
									],
									[
										61822,
										61827
									],
									[
										61941,
										61946
									],
									[
										61970,
										61975
									],
									[
										62065,
										62070
									],
									[
										62081,
										62086
									],
									[
										62105,
										62110
									],
									[
										62187,
										62192
									],
									[
										62326,
										62331
									],
									[
										62393,
										62398
									],
									[
										62469,
										62474
									],
									[
										62529,
										62534
									],
									[
										62540,
										62545
									],
									[
										62579,
										62584
									],
									[
										62641,
										62646
									],
									[
										62672,
										62677
									],
									[
										62881,
										62886
									],
									[
										62928,
										62933
									],
									[
										62970,
										62975
									],
									[
										63126,
										63131
									],
									[
										63516,
										63521
									],
									[
										63812,
										63817
									],
									[
										64084,
										64089
									],
									[
										64346,
										64351
									],
									[
										64455,
										64460
									],
									[
										64688,
										64693
									],
									[
										64900,
										64905
									],
									[
										65091,
										65096
									],
									[
										65273,
										65278
									],
									[
										65397,
										65402
									],
									[
										65439,
										65444
									],
									[
										65445,
										65450
									],
									[
										65590,
										65595
									],
									[
										65599,
										65604
									],
									[
										65764,
										65769
									],
									[
										65798,
										65803
									],
									[
										65835,
										65840
									],
									[
										66094,
										66099
									],
									[
										66100,
										66105
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 168.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/kei/Cloud/Documents/utility",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 324,
						"regions":
						{
						},
						"selection":
						[
							[
								7,
								7
							]
						],
						"settings":
						{
							"auto_name": "utility",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "irc/channelreg.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10263,
						"regions":
						{
						},
						"selection":
						[
							[
								5802,
								5802
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1716.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "irc/commands.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6331,
						"regions":
						{
						},
						"selection":
						[
							[
								2246,
								2246
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 820.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "irc/handlers.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 81394,
						"regions":
						{
						},
						"selection":
						[
							[
								60523,
								60523
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.sublime-syntax",
							"translate_tabs_to_spaces": false,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 22308.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "irc/fakelag_test.go",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 2697,
						"regions":
						{
						},
						"selection":
						[
							[
								257,
								257
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "irc/roleplay.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2293,
						"regions":
						{
						},
						"selection":
						[
							[
								332,
								332
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 36.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "irc/server.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38208,
						"regions":
						{
						},
						"selection":
						[
							[
								11613,
								11613
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.sublime-syntax",
							"translate_tabs_to_spaces": false,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 3664.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "irc/modes.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9715,
						"regions":
						{
						},
						"selection":
						[
							[
								6272,
								6272
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2124.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "irc/getters.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6787,
						"regions":
						{
						},
						"selection":
						[
							[
								6596,
								6596
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2956.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 21.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "oragono.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 241.0,
	"status_bar_visible": false,
	"template_settings":
	{
	}
}
